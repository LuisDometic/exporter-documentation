(()=>{var e={"./node_modules/css-color-list/index.js":(e,r,t)=>{"use strict";var a=t("./node_modules/css-color-list/node_modules/css-color-names/css-color-names.json");e.exports=function(){return Object.keys(a)}},"./node_modules/get-contrast/index.js":(e,r,t)=>{const a=t("./node_modules/rgb/index.js"),n=t("./node_modules/wcag-contrast/dist/index.m.js"),o=t("./node_modules/is-blank/index.js"),s=t("./node_modules/is-named-css-color/index.js"),i=t("./node_modules/css-color-names/css-color-names.json");function l(e,r,t){return e=c(e,t),r=c(r,t),n.rgb(e,r)}function c(e,r){if("string"!=typeof e)throw new TypeError("get-contrast expects colors as strings");let t=e.toLowerCase();return s(t)&&(t=i[t]),t=u(t,r),t.match(/\((.*)\)/)[1].split(",").slice(0,3)}function u(e,r){r=r||{};const t=(e=a(e)).match(/\((.*)\)/)[1].split(",");if(4!=t.length||"0"!=t[3]||r.ignoreAlpha)return e;throw new TypeError("get-contrast cannot contrast transparent colors")}e.exports.ratio=l,e.exports.score=function(e,r,t){var a=n.score(l(e,r,t));return o(a)?"F":a},e.exports.isAccessible=function(e,r,t){return l(e,r,t)>4.5},e.exports.isNotTransparent=u},"./node_modules/hash-string/build/hash-string.js":function(e,r){var t,a,n;a=[],void 0===(n="function"==typeof(t=function(){function e(e){"use strict";for(var r=5381,t=e.length;t;)r=33*r^e.charCodeAt(--t);return r>>>0}return e})?t.apply(r,a):t)||(e.exports=n)},"./node_modules/is-blank/index.js":(e,r,t)=>{var a=t("./node_modules/is-empty/lib/index.js"),n=t("./node_modules/is-whitespace/index.js");e.exports=function(e){return function(e){return"string"==typeof e}(e)&&e.length?n(e):a(e)}},"./node_modules/is-empty/lib/index.js":e=>{var r=Object.prototype.hasOwnProperty,t=Object.prototype.toString;e.exports=function(e){if(null==e)return!0;if("boolean"==typeof e)return!1;if("number"==typeof e)return 0===e;if("string"==typeof e)return 0===e.length;if("function"==typeof e)return 0===e.length;if(Array.isArray(e))return 0===e.length;if(e instanceof Error)return""===e.message;if(e.toString==t)switch(e.toString()){case"[object File]":case"[object Map]":case"[object Set]":return 0===e.size;case"[object Object]":for(var a in e)if(r.call(e,a))return!1;return!0}return!1}},"./node_modules/is-named-css-color/index.js":(e,r,t)=>{"use strict";var a=t("./node_modules/css-color-list/index.js");e.exports=function(e){if("string"!=typeof e)throw new TypeError("is-named-css-color expects a string");return new RegExp("^"+a().join("|")+"$","i").test(e)}},"./node_modules/is-whitespace/index.js":e=>{"use strict";var r;e.exports=function(e){return"string"==typeof e&&(r||(r=new RegExp('^[\\s\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"]+$'))).test(e)}},"./node_modules/rgb/index.js":e=>{"use strict";var r={maroon:"#800000",red:"#ff0000",orange:"#ffA500",yellow:"#ffff00",olive:"#808000",purple:"#800080",fuchsia:"#ff00ff",white:"#ffffff",lime:"#00ff00",green:"#008000",navy:"#000080",blue:"#0000ff",aqua:"#00ffff",teal:"#008080",black:"#000000",silver:"#c0c0c0",gray:"#808080",transparent:"#0000"},t=function(e,r,t,a){return null!=a&&""!==a||(a=1),e=parseFloat(e),r=parseFloat(r),t=parseFloat(t),a=parseFloat(a),e<=255&&e>=0&&r<=255&&r>=0&&t<=255&&t>=0&&a<=1&&a>=0?[Math.round(e),Math.round(r),Math.round(t),a]:null},a=function(e,r,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?e+6*(r-e)*t:t<.5?r:t<2/3?e+(r-e)*(2/3-t)*6:e},n=function(e,r,t,n){var o,s,i;if(null!=n&&""!==n||(n=1),e=parseFloat(e)/360,r=parseFloat(r)/100,t=parseFloat(t)/100,n=parseFloat(n)/1,e>1||e<0||r>1||r<0||t>1||t<0||n>1||n<0)return null;if(0===r)o=s=i=t;else{var l=t<.5?t*(1+r):t+r-t*r,c=2*t-l;o=a(c,l,e+1/3),i=a(c,l,e),s=a(c,l,e-1/3)}return[255*o,255*i,255*s,n]},o=[];for(var s in r)o.push(s);var i="(?:#([a-f0-9]{3,8}))",l="\\s*([.\\d%]+)\\s*",c="\\("+[l,l,l]+"(?:,\\s*([.\\d]+)\\s*)?\\)",u="(?:rgb)a?",d="(?:hsl)a?",p="("+o.join("|")+")",f=RegExp(i,"i"),h=RegExp(u+c,"i"),g=RegExp(d+c,"i"),m=function(e,a){if(null==e)return null;e=(e+"").replace(/\s+/,"");var o=r[e];if(o)return m(o,a);if(o=e.match(f))e=function(e){if(3===e.length&&(e+="f"),4===e.length){var r=e.charAt(0),t=e.charAt(1),a=e.charAt(2),n=e.charAt(3);e=r+r+t+t+a+a+n+n}6===e.length&&(e+="ff");for(var o=[],s=0,i=e.length;s<i;s+=2)o.push(parseInt(e.substr(s,2),16)/(6===s?255:1));return o}(o[1]);else if(o=e.match(h))e=o.slice(1);else{if(!(o=e.match(g)))return null;e=n.apply(null,o.slice(1))}return e&&(e=t.apply(null,e))?a?e:(1===e[3]&&e.splice(3,1),"rgb"+(4===e.length?"a":"")+"("+e+")"):null},_=RegExp([p,i,u+c,d+c].join("|"),"gi");m.replace=function(e,r){return r||(r=function(e){return m(e)}),(e+"").replace(_,r)},m.matches=function(e){return!!(e+"").match(_)},e.exports=m},"./node_modules/short-hash/src/index.js":(e,r,t)=>{"use strict";var a=t("./node_modules/hash-string/build/hash-string.js");e.exports=function(e){return a(e).toString(16)}},"./typescript/src/doc_functionality/color.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.getClassForInvertedText=r.returnSwatchClassnames=r.contrastColor=r.getColorContrastRatio=r.getColorContrast=void 0;const a=t("./node_modules/get-contrast/index.js");function n(e){if(!e)return 0;0===e.indexOf("#")&&(e=e.slice(1));return(.299*parseInt(e.substr(0,2),16)+.587*parseInt(e.substr(2,2),16)+.114*parseInt(e.substr(4,2),16))/255}r.getColorContrast=n,r.getColorContrastRatio=function(e,r){return Math.round(10*a.ratio("#"+e,"#"+r))/10},r.contrastColor=function(e){return e?n(e)>.4?"dark":"light":"dark"},r.returnSwatchClassnames=function(e){if(!e)return"";let r=new Array;return"ffffffff"===e.hex&&r.push("bordered"),n(e.hex)<.4&&e.a>180&&r.push("inverted-text"),r.join(" ")},r.getClassForInvertedText=function(e){return e&&n(e)<.4?"inverted-text":""}},"./typescript/src/doc_functionality/general-utils.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.generateCustomCSSHash=r.getFormattedDateTime=r.getFullYear=void 0;var a=t("./node_modules/short-hash/src/index.js");r.getFullYear=function(){return(new Date).getFullYear().toString()},r.getFormattedDateTime=function(e=new Date){return e.toLocaleString("en-us",{day:"numeric",month:"short",year:"numeric",hour12:!1,hour:"2-digit",minute:"2-digit"})},r.generateCustomCSSHash=function(e){const r=["customCSS","customFontFamily","lookAndFeelAccentColor","lookAndFeelAccentAlternativeColor","lookAndFeelAccentSurfaceColor","themeConfiguration","siteMaxWidth","contentContainerWidth","topNavigationStyle","topNavigationBackground","topNavigationHeight","limitSiteMaxWidth","sideNavigationStyle","sideNavigationBackground","headerLogoHeight","iconStrokeWidth","lookAndFeelHeaderLayoutStyle","lookAndFeelHeaderBackgroundColor","lookAndFeelHeaderTextColor","advancedCustomizationCustomCSS"],t=Object.keys(e).filter((e=>r.includes(e))).reduce(((r,t)=>(r[t]=e[t],r)),{});return a(JSON.stringify(t))}},"./typescript/src/doc_functionality/health.ts":(e,r)=>{"use strict";function t(e){e=(e=e.replace(/^\s+|\s+$/g,"")).toLowerCase();for(var r="ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;",t=0,a=r.length;t<a;t++)e=e.replace(new RegExp(r.charAt(t),"g"),"AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------".charAt(t));return e=e.replace(/[^a-z0-9 -]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-")}Object.defineProperty(r,"__esModule",{value:!0}),r.getFigmaFileUrl=r.sortComponentsAlphabetically=r.convertHealthTagIfAny=void 0,r.convertHealthTagIfAny=function(e){let r=e.properties,a=e.propertyValues,n=null;for(let e of r)if("status"===e.codeName){let r=a.status,o=e.options;for(let e of o)e.id===r&&(e.slug=t(e.name),n=e)}return n||{name:"Unknown status",slug:"unknown",backgroundColor:"#FFFFFF"}},r.sortComponentsAlphabetically=function(e){return e.sort((function(e,r){return e.name.localeCompare(r.name)})),e},r.getFigmaFileUrl=function(e){return"https://www.figma.com/file/"+e.fileId+"?node-id="+e.nodeId}},"./typescript/src/doc_functionality/lookup.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.checkKeyInArray=r.getCurrentTimestamp=r.isExportable=r.previousPage=r.nextPage=r.flattenedPageStructure=r.resolveMenuLabel=r.isHomepage=r.firstPageFromTop=r.pageOrGroupActiveInContext=r.firstSubgroupOfPage=void 0;const a=t("./typescript/src/doc_functionality/sandbox.ts");function n(e){for(let r of e.children)if(i(r)){if("Page"===r.type)return r;{let e=n(r);if(e)return e}}return null}function o(e,r){let t=n(r);return null!==t&&e.id===t.id}function s(e){let r=[];for(let t of e.children)i(t)&&("Page"===t.type?r.push(t):"Group"===t.type&&(r=r.concat(s(t))));return r}function i(e){if(null==e)return!1;if("Group"===e.type){if(e.title.startsWith("_"))return!1;{let r=e.parent;return!r||i(r)}}return"Page"===e.type&&!e.title.startsWith("_")}r.firstSubgroupOfPage=function(e){let r=e.parent;for(;;){if(!r||r.isRoot)return;if(r.parent&&r.parent.isRoot)return r;r=r.parent}},r.pageOrGroupActiveInContext=function e(r,t){if("Page"===t.type){return t.id===r.id}{let a=t;return-1!==a.childrenIds.indexOf(r.persistentId)||!!r.parent&&e(r.parent,a)}},r.firstPageFromTop=n,r.isHomepage=o,r.resolveMenuLabel=function(e,r,t){return o(e,r)&&""!==t?t:(0,a.htmlSafeString)(e.title)},r.flattenedPageStructure=s,r.nextPage=function(e,r){let t=s(r),a=t.findIndex((r=>r.id===e.id));return-1!==a&&a<t.length-1?t[a+1]:null},r.previousPage=function(e,r){let t=s(r),a=t.findIndex((r=>r.id===e.id));return a>0?t[a-1]:null},r.isExportable=i,r.getCurrentTimestamp=function(){return Math.floor(Date.now()).toString()},r.checkKeyInArray=function(e,r){if(e)for(let t=0;t<e.length;t++)if(e[t]===r)return!0;return!1}},"./typescript/src/doc_functionality/markdown.ts":function(e,r,t){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,r,t,a){void 0===a&&(a=t);var n=Object.getOwnPropertyDescriptor(r,t);n&&!("get"in n?!r.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,a,n)}:function(e,r,t,a){void 0===a&&(a=t),e[a]=r[t]}),n=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(r,e,t);return n(r,e),r};Object.defineProperty(r,"__esModule",{value:!0}),r.markdownToHTML=void 0;const s=o(t("./typescript/node_modules/showdown/dist/showdown.js"));r.markdownToHTML=function(e){s.setFlavor("github"),s.setOption("simpleLineBreaks",!1);let r=new s.Converter;r.addExtension([{type:"output",regex:"<code>(.*?)</code>",replace:function(e,r){return`<mark>${r}</mark>`}}]);const t={table:"table table-bordered"},a=Object.keys(t).map((e=>({type:"output",regex:new RegExp(`<${e}(.*)>`,"g"),replace:`<${e} class="${t[e]}" $1>`})));return r.addExtension([...a]),r.addExtension([{type:"output",regex:'<pre><code class="(.+?)">((.|\n)*?)</code></pre>',replace:function(e,r,t){return`<pre class="code-block"><code class="language-${r}">\n\n${t}</code></pre>`}}]),r.addExtension([{type:"output",regex:"<pre><code>",replace:function(){return'<pre class="code-block"><code class="language-typescript">\n\n'}}]),`<div class="markdown">${r.makeHtml(e)}</div>`}},"./typescript/src/doc_functionality/sandbox.ts":(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.htmlSafeUrl=r.htmlSafeString=void 0,r.htmlSafeString=function(e){return e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):""},r.htmlSafeUrl=function(e){return encodeURI(null!=e?e:"")}},"./typescript/src/doc_functionality/search.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.buildSearchIndexJSON=r.DocSearchResultDataType=void 0;const a=t("./typescript/src/doc_functionality/lookup.ts"),n=t("./typescript/src/doc_functionality/urls.ts");var o;function s(e){let r=e.blocks;for(let t of e.blocks)r=r.concat(i(t));return r}function i(e){let r=e.children;for(let t of e.children)r=r.concat(i(t));return r}!function(e){e.contentBlock="contentBlock",e.sectionHeader="sectionHeader",e.pageTitle="pageTitle",e.groupTitle="groupTitle"}(o=r.DocSearchResultDataType||(r.DocSearchResultDataType={})),r.buildSearchIndexJSON=function(e,r,t){let i=[];for(let r of e){let e=[r.title],l=r.parent,c=!(0,a.isExportable)(r);for(;l&&((0,a.isExportable)(l)||(c=!0),!(null==l?void 0:l.isRoot));)e.splice(0,0,l.title),l=l.parent;if(c)continue;let u=(0,n.pageUrl)(r,t),d=r.title;r.parent&&"Tabs"===r.parent.groupBehavior&&(d=r.parent.title+"/"+d);let p=e.join(" / "),f=s(r);for(let e of f)if(e.hasOwnProperty("text")){let r=e;i.push({text:r.text.spans.map((e=>e.text)).join("").replace(/</g,"&lt;").replace(/>/g,"&gt;"),type:"Heading"===e.type?o.sectionHeader:o.contentBlock,pageName:d,category:p,url:u+"#search-"+e.id})}i.push({text:r.title,type:o.pageTitle,pageName:d,category:p,url:u})}for(let e of r){if(!(0,a.isExportable)(e))continue;let r=[e.title],s=e.parent;for(;s&&!(null==s?void 0:s.isRoot);)r.splice(0,0,s.title),s=s.parent;let l=(0,n.pageUrl)(e,t),c=r.join(" / ");i.push({text:e.title,type:o.groupTitle,pageName:e.title,category:c,url:l})}return`\n  const FuseSearchData = ${JSON.stringify(i,null,2)};\n  `}},"./typescript/src/doc_functionality/string_utils.ts":(e,r)=>{"use strict";function t(e){if(e){var r,t=""+e,a=/["'&<>]/.exec(t);if(!a)return t;var n="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:r="&quot;";break;case 38:r="&amp;";break;case 39:r="&#39;";break;case 60:r="&lt;";break;case 62:r="&gt;";break;default:continue}s!==o&&(n+=t.substring(s,o)),s=o+1,n+=r}return s!==o?n+t.substring(s,o):n}}Object.defineProperty(r,"__esModule",{value:!0}),r.normalizeStringForSearch=r.getVariantClass=r.getSearchIDString=r.changelogToEntries=r.getUrlExtension=r.withHTMLNewlines=r.addSlashes=r.escapeHtml=r.highlightSafeString=void 0,r.highlightSafeString=function(e){return t(e.text.spans.map((e=>e.text)).join(""))},r.escapeHtml=t,r.addSlashes=function(e){return(e+"").replace(/[\\"']/g,"\\$&").replace(/\u0000/g,"\\0")},r.withHTMLNewlines=function(e){return e?e.split("\n").join("<br />"):""},r.getUrlExtension=function(e){if(e)return e.split(".").pop()},r.changelogToEntries=function(e){if(!e)return[];let r=e.split("\n").map((e=>e.trim())),t=new Array;for(let e of r)e.startsWith("-")?t.push(e.substring(1)):t.push(e);return t=t.map((e=>e.trim())).filter((e=>e.trim().length>0)),t},r.getSearchIDString=function(e){return e?"search-"+e:""},r.getVariantClass=function(e){return e?" variant-"+e:""},r.normalizeStringForSearch=function(e){const r=["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","often","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your","ain't","aren't","can't","could've","couldn't","didn't","doesn't","don't","hasn't","he'd","he'll","he's","how'd","how'll","how's","i'd","i'll","i'm","i've","isn't","it's","might've","mightn't","must've","mustn't","shan't","she'd","she'll","she's","should've","shouldn't","that'll","that's","there's","they'd","they'll","they're","they've","wasn't","we'd","we'll","we're","weren't","what'd","what's","when'd","when'll","when's","where'd","where'll","where's","who'd","who'll","who's","why'd","why'll","why's","won't","would've","wouldn't","you'd","you'll","you're","you've"];let t,a,n=e.match(/[\w-]+/g),o={},s=[];for(a=0;a<r.length;a++)o[r[a].trim()]=!0;if(!n)return"";for(a=0;a<n.length;a++)t=n[a].trim().toLowerCase(),o[t]||s.push(t);return s.toString().replace(/,/g," ")}},"./typescript/src/doc_functionality/tokens.ts":(e,r)=>{"use strict";function t(e){var r=n(o(e.value.radius.measure)),t=n(e.value.x.measure),s=n(e.value.y.measure),i=n(e.value.spread.measure);return`${"Inner"===e.value.type?"inset ":""}${t} ${s} ${r} ${i} ${a(e.value.color,!0)}`}function a(e,r=!1){if(0===e.a||255===e.a)return r?`rgb(${e.r},${e.g},${e.b})`:(t=e.r,a=e.g,n=e.b,"#"+((1<<24)+(t<<16)+(a<<8)+n).toString(16).slice(1));{const r=Math.round(e.a/255*100)/100;return`rgba(${e.r},${e.g},${e.b},${r})`}var t,a,n}function n(e,r,t){return 0===e&&!0!==t?`${e}`:`${e}px`}function o(e){return e<=0?0:e}function s(e){switch(e){case"Points":return"pt";case"Pixels":return"px";case"Percent":return"%";case"Ems":return"em"}}function i(e){switch(e){case"Upper":return"uppercase";case"Lower":return"lowercase";case"Camel":return"capitalize";default:return"none"}}function l(e){switch(e.toLowerCase()){case"thin":return"100";case"extralight":return"200";case"light":return"300";case"regular":return"400";case"medium":return"500";case"semibold":return"600";case"bold":return"700";case"extrabold":return"800";case"black":return"900";default:return e}}Object.defineProperty(r,"__esModule",{value:!0}),r.getColorValueFromSettings=r.convertTypographyTokenToCSS=r.convertSubfamilyToFontWeight=r.convertTextCaseToTextTransform=r.measureTypeIntoReadableUnit=r.typographyDescription=r.getFormattedColor=r.scaledShadowTokenValue=r.shadowTokenValue=r.shadowDescription=r.gradientTokenValue=r.gradientDescription=r.formattedTokenGroupHeader=r.fullTokenGroupName=void 0,r.fullTokenGroupName=function(e){return[...e.path,e.name].join("/")},r.formattedTokenGroupHeader=function(e,r){if(e.path.length>0&&r){return`<span class="light">${e.path.join(" / ")} / </span>${e.name}`}return e.name},r.gradientDescription=function(e){return`${`${e.value.type} Gradient`}, ${e.value.stops.map((e=>`#${e.color.hex.toUpperCase()}, ${(100*e.position).toFixed(2)}%`)).join(", ")}`},r.gradientTokenValue=function(e){let r="";switch(e.value.type){case"Linear":const t=Math.round(100*(e.value.to.x-e.value.from.x)),a=Math.round(100*(e.value.to.y-e.value.from.y));r=`linear-gradient(${Math.round(Math.atan2(a,t)*(180/Math.PI))+90}deg, `;break;case"Radial":r="radial-gradient(circle, ";break;case"Angular":r="conic-gradient("}return`${r}${e.value.stops.map((e=>`#${e.color.hex.toUpperCase()} ${(100*e.position).toFixed(2)}%`)).join(", ")})`},r.shadowDescription=function(e){var r;return null===(r=e.shadowLayers)||void 0===r?void 0:r.reverse().map((e=>t(e))).join(", ")},r.shadowTokenValue=t,r.scaledShadowTokenValue=function(e,r){var t=o(e.value.radius.measure),s=e.value.x.measure,i=e.value.y.measure,l=e.value.spread.measure;if(null!=r){var c=Math.max(Math.abs(s),Math.abs(i)),u=Math.max(o(t)+Math.max(l,0)+c,1);t=t*r/u,s=s*r/u,i=i*r/u,l=l*r/u}return`${"Inner"===e.value.type?"inset ":""}${n(s)} ${n(i)} ${n(t)} ${n(l)} ${a(e.value.color,!0)}`},r.getFormattedColor=a,r.typographyDescription=function(e){let r=e.value,t=`${r.font.family} ${r.font.subfamily}`,a=`${r.fontSize.measure}${s(r.fontSize.unit)}`,n=r.lineHeight?`/${r.lineHeight.measure}${s(r.lineHeight.unit)}`:"",o="",i="";return null!==r.textDecoration&&"None"!==r.textDecoration&&(o=`, ${r.textDecoration.toLowerCase()}`),null!==r.textCase&&"Original"!==r.textCase&&(i=`, ${r.textCase.toLowerCase()}`),`${t} ${a}${n}${o}${i}`},r.measureTypeIntoReadableUnit=s,r.convertTextCaseToTextTransform=i,r.convertSubfamilyToFontWeight=l,r.convertTypographyTokenToCSS=function(e,r=!1){let t=e.value.font,a=e.value.fontSize,n=e.value.fontSize.measure,o=e.value.textDecoration,c=i(e.value.textCase),u=l(e.value.font.subfamily);return!0===r&&a.measure>24&&(n=24),`font-family: '${t.family}', Inter, sans-serif; font-weight: ${u}; font-size: ${n}${s(a.unit)}; text-decoration: ${o.toLowerCase()}; text-transform: ${c};`},r.getColorValueFromSettings=function(e,r){return null!==e?e:null!==r?`#${r.value.hex}`:null}},"./typescript/src/doc_functionality/urls.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.slugifyHeading=r.textBlockPlainText=r.removeVersionFromDomainUrl=r.assetUrl=r.rootUrl=r.pageIdentifier=r.pageUrlForFilepath=r.pageUrl=void 0;const a=t("./typescript/src/doc_functionality/lookup.ts");function n(e,r){var t;if(!e)return"#";let n=null;if(n="Page"===e.type?e:(0,a.firstPageFromTop)(e),!n)return"";const o=[r,...n.relativeUrl.split("/").filter(Boolean)].join("/"),s=null===(t=Pulsar.systemData)||void 0===t?void 0:t.call(Pulsar);return s&&"extension"===s.environment?o+".html":o}function o(e){return e.text.spans.map((e=>e.text)).join("")}r.pageUrl=n,r.pageUrlForFilepath=function(e,r){let t=n(e,r);return t.endsWith(".html")?t:t+".html"},r.pageIdentifier=function(e){if(!e)return"#";let r=null;return r="Page"===e.type?e:(0,a.firstPageFromTop)(e),r?["page","body",r.relativeUrl].join("/").replace("/","-"):""},r.rootUrl=function(e,r){return[r,e].join("/")},r.assetUrl=function(e,r){return[r,"assets",e].join("/")},r.removeVersionFromDomainUrl=function(e){return e.substring(0,e.lastIndexOf("/"))},r.textBlockPlainText=o,r.slugifyHeading=function(e){return"section-"+function(e){if(!e)return"";e=(e=e.replace(/^\s+|\s+$/g,"")).toLowerCase();for(var r="àáãäâèéëêìíïîòóöôùúüûñç·/_,:;",t="aaaaaeeeeiiiioooouuuunc------",a=0,n=r.length;a<n;a++)e=e.replace(new RegExp(r.charAt(a),"g"),t.charAt(a));return e=e.replace(/[^a-z0-9 -]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-")}(o(e))+"-"+e.id.substring(0,2)}},"./node_modules/wcag-contrast/dist/index.m.js":(e,r,t)=>{"use strict";t.r(r),t.d(r,{hex:()=>c,luminance:()=>i,rgb:()=>l,score:()=>u});var a=1/12.92;function n(e){return Math.pow((e+.055)/1.055,2.4)}function o(e){var r=e[0]/255,t=e[1]/255,o=e[2]/255;return.2126*(r<=.03928?r*a:n(r))+.7152*(t<=.03928?t*a:n(t))+.0722*(o<=.03928?o*a:n(o))}function s(e){var r=255;8===(e=e.replace(/^#/,"")).length&&(r=parseInt(e.slice(6,8),16),e=e.substring(0,6)),4===e.length&&(r=parseInt(e.slice(3,4).repeat(2),16),e=e.substring(0,3)),3===e.length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]);var t=parseInt(e,16);return[t>>16,t>>8&255,255&t,r]}function i(e,r){return(Math.max(e,r)+.05)/(Math.min(e,r)+.05)}function l(e,r){return i(o(e),o(r))}function c(e,r){return l(s(e),s(r))}function u(e){return e>=7?"AAA":e>=4.5?"AA":e>=3?"AA Large":"Fail"}},"./typescript/node_modules/showdown/dist/showdown.js":function(e,r,t){var a;(function(){function n(e){"use strict";var r={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:"Remove only spaces, ' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids",type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,description:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,description:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,description:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,description:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,description:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",description:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,description:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,description:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,description:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,description:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,description:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},completeHTMLDocument:{defaultValue:!1,description:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,description:"Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,description:"Split adjacent blockquote blocks",type:"boolean"}};if(!1===e)return JSON.parse(JSON.stringify(r));var t={};for(var a in r)r.hasOwnProperty(a)&&(t[a]=r[a].defaultValue);return t}var o={},s={},i={},l=n(!0),c="vanilla",u={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:n(!0),allOn:function(){"use strict";var e=n(!0),r={};for(var t in e)e.hasOwnProperty(t)&&(r[t]=!0);return r}()};function d(e,r){"use strict";var t=r?"Error in "+r+" extension->":"Error in unnamed extension",a={valid:!0,error:""};o.helper.isArray(e)||(e=[e]);for(var n=0;n<e.length;++n){var s=t+" sub-extension "+n+": ",i=e[n];if("object"!=typeof i)return a.valid=!1,a.error=s+"must be an object, but "+typeof i+" given",a;if(!o.helper.isString(i.type))return a.valid=!1,a.error=s+'property "type" must be a string, but '+typeof i.type+" given",a;var l=i.type=i.type.toLowerCase();if("language"===l&&(l=i.type="lang"),"html"===l&&(l=i.type="output"),"lang"!==l&&"output"!==l&&"listener"!==l)return a.valid=!1,a.error=s+"type "+l+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',a;if("listener"===l){if(o.helper.isUndefined(i.listeners))return a.valid=!1,a.error=s+'. Extensions of type "listener" must have a property called "listeners"',a}else if(o.helper.isUndefined(i.filter)&&o.helper.isUndefined(i.regex))return a.valid=!1,a.error=s+l+' extensions must define either a "regex" property or a "filter" method',a;if(i.listeners){if("object"!=typeof i.listeners)return a.valid=!1,a.error=s+'"listeners" property must be an object but '+typeof i.listeners+" given",a;for(var c in i.listeners)if(i.listeners.hasOwnProperty(c)&&"function"!=typeof i.listeners[c])return a.valid=!1,a.error=s+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+c+" must be a function but "+typeof i.listeners[c]+" given",a}if(i.filter){if("function"!=typeof i.filter)return a.valid=!1,a.error=s+'"filter" must be a function, but '+typeof i.filter+" given",a}else if(i.regex){if(o.helper.isString(i.regex)&&(i.regex=new RegExp(i.regex,"g")),!(i.regex instanceof RegExp))return a.valid=!1,a.error=s+'"regex" property must either be a string or a RegExp object, but '+typeof i.regex+" given",a;if(o.helper.isUndefined(i.replace))return a.valid=!1,a.error=s+'"regex" extensions must implement a replace string or function',a}}return a}function p(e,r){"use strict";return"¨E"+r.charCodeAt(0)+"E"}o.helper={},o.extensions={},o.setOption=function(e,r){"use strict";return l[e]=r,this},o.getOption=function(e){"use strict";return l[e]},o.getOptions=function(){"use strict";return l},o.resetOptions=function(){"use strict";l=n(!0)},o.setFlavor=function(e){"use strict";if(!u.hasOwnProperty(e))throw Error(e+" flavor was not found");o.resetOptions();var r=u[e];for(var t in c=e,r)r.hasOwnProperty(t)&&(l[t]=r[t])},o.getFlavor=function(){"use strict";return c},o.getFlavorOptions=function(e){"use strict";if(u.hasOwnProperty(e))return u[e]},o.getDefaultOptions=function(e){"use strict";return n(e)},o.subParser=function(e,r){"use strict";if(o.helper.isString(e)){if(void 0===r){if(s.hasOwnProperty(e))return s[e];throw Error("SubParser named "+e+" not registered!")}s[e]=r}},o.extension=function(e,r){"use strict";if(!o.helper.isString(e))throw Error("Extension 'name' must be a string");if(e=o.helper.stdExtName(e),o.helper.isUndefined(r)){if(!i.hasOwnProperty(e))throw Error("Extension named "+e+" is not registered!");return i[e]}"function"==typeof r&&(r=r()),o.helper.isArray(r)||(r=[r]);var t=d(r,e);if(!t.valid)throw Error(t.error);i[e]=r},o.getAllExtensions=function(){"use strict";return i},o.removeExtension=function(e){"use strict";delete i[e]},o.resetExtensions=function(){"use strict";i={}},o.validateExtension=function(e){"use strict";var r=d(e,null);return!!r.valid||(console.warn(r.error),!1)},o.hasOwnProperty("helper")||(o.helper={}),o.helper.isString=function(e){"use strict";return"string"==typeof e||e instanceof String},o.helper.isFunction=function(e){"use strict";return e&&"[object Function]"==={}.toString.call(e)},o.helper.isArray=function(e){"use strict";return Array.isArray(e)},o.helper.isUndefined=function(e){"use strict";return void 0===e},o.helper.forEach=function(e,r){"use strict";if(o.helper.isUndefined(e))throw new Error("obj param is required");if(o.helper.isUndefined(r))throw new Error("callback param is required");if(!o.helper.isFunction(r))throw new Error("callback param must be a function/closure");if("function"==typeof e.forEach)e.forEach(r);else if(o.helper.isArray(e))for(var t=0;t<e.length;t++)r(e[t],t,e);else{if("object"!=typeof e)throw new Error("obj does not seem to be an array or an iterable object");for(var a in e)e.hasOwnProperty(a)&&r(e[a],a,e)}},o.helper.stdExtName=function(e){"use strict";return e.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()},o.helper.escapeCharactersCallback=p,o.helper.escapeCharacters=function(e,r,t){"use strict";var a="(["+r.replace(/([\[\]\\])/g,"\\$1")+"])";t&&(a="\\\\"+a);var n=new RegExp(a,"g");return e=e.replace(n,p)},o.helper.unescapeHTMLEntities=function(e){"use strict";return e.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var f=function(e,r,t,a){"use strict";var n,o,s,i,l,c=a||"",u=c.indexOf("g")>-1,d=new RegExp(r+"|"+t,"g"+c.replace(/g/g,"")),p=new RegExp(r,c.replace(/g/g,"")),f=[];do{for(n=0;s=d.exec(e);)if(p.test(s[0]))n++||(i=(o=d.lastIndex)-s[0].length);else if(n&&!--n){l=s.index+s[0].length;var h={left:{start:i,end:o},match:{start:o,end:s.index},right:{start:s.index,end:l},wholeMatch:{start:i,end:l}};if(f.push(h),!u)return f}}while(n&&(d.lastIndex=o));return f};o.helper.matchRecursiveRegExp=function(e,r,t,a){"use strict";for(var n=f(e,r,t,a),o=[],s=0;s<n.length;++s)o.push([e.slice(n[s].wholeMatch.start,n[s].wholeMatch.end),e.slice(n[s].match.start,n[s].match.end),e.slice(n[s].left.start,n[s].left.end),e.slice(n[s].right.start,n[s].right.end)]);return o},o.helper.replaceRecursiveRegExp=function(e,r,t,a,n){"use strict";if(!o.helper.isFunction(r)){var s=r;r=function(){return s}}var i=f(e,t,a,n),l=e,c=i.length;if(c>0){var u=[];0!==i[0].wholeMatch.start&&u.push(e.slice(0,i[0].wholeMatch.start));for(var d=0;d<c;++d)u.push(r(e.slice(i[d].wholeMatch.start,i[d].wholeMatch.end),e.slice(i[d].match.start,i[d].match.end),e.slice(i[d].left.start,i[d].left.end),e.slice(i[d].right.start,i[d].right.end))),d<c-1&&u.push(e.slice(i[d].wholeMatch.end,i[d+1].wholeMatch.start));i[c-1].wholeMatch.end<e.length&&u.push(e.slice(i[c-1].wholeMatch.end)),l=u.join("")}return l},o.helper.regexIndexOf=function(e,r,t){"use strict";if(!o.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(r instanceof RegExp==!1)throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var a=e.substring(t||0).search(r);return a>=0?a+(t||0):a},o.helper.splitAtIndex=function(e,r){"use strict";if(!o.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[e.substring(0,r),e.substring(r)]},o.helper.encodeEmailAddress=function(e){"use strict";var r=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e=e.replace(/./g,(function(e){if("@"===e)e=r[Math.floor(2*Math.random())](e);else{var t=Math.random();e=t>.9?r[2](e):t>.45?r[1](e):r[0](e)}return e}))},o.helper.padEnd=function(e,r,t){"use strict";return r>>=0,t=String(t||" "),e.length>r?String(e):((r-=e.length)>t.length&&(t+=t.repeat(r/t.length)),String(e)+t.slice(0,r))},"undefined"==typeof console&&(console={warn:function(e){"use strict";alert(e)},log:function(e){"use strict";alert(e)},error:function(e){"use strict";throw e}}),o.helper.regexes={asteriskDashAndColon:/([*_:~])/g},o.helper.emojis={"+1":"👍","-1":"👎",100:"💯",1234:"🔢","1st_place_medal":"🥇","2nd_place_medal":"🥈","3rd_place_medal":"🥉","8ball":"🎱",a:"🅰️",ab:"🆎",abc:"🔤",abcd:"🔡",accept:"🉑",aerial_tramway:"🚡",airplane:"✈️",alarm_clock:"⏰",alembic:"⚗️",alien:"👽",ambulance:"🚑",amphora:"🏺",anchor:"⚓️",angel:"👼",anger:"💢",angry:"😠",anguished:"😧",ant:"🐜",apple:"🍎",aquarius:"♒️",aries:"♈️",arrow_backward:"◀️",arrow_double_down:"⏬",arrow_double_up:"⏫",arrow_down:"⬇️",arrow_down_small:"🔽",arrow_forward:"▶️",arrow_heading_down:"⤵️",arrow_heading_up:"⤴️",arrow_left:"⬅️",arrow_lower_left:"↙️",arrow_lower_right:"↘️",arrow_right:"➡️",arrow_right_hook:"↪️",arrow_up:"⬆️",arrow_up_down:"↕️",arrow_up_small:"🔼",arrow_upper_left:"↖️",arrow_upper_right:"↗️",arrows_clockwise:"🔃",arrows_counterclockwise:"🔄",art:"🎨",articulated_lorry:"🚛",artificial_satellite:"🛰",astonished:"😲",athletic_shoe:"👟",atm:"🏧",atom_symbol:"⚛️",avocado:"🥑",b:"🅱️",baby:"👶",baby_bottle:"🍼",baby_chick:"🐤",baby_symbol:"🚼",back:"🔙",bacon:"🥓",badminton:"🏸",baggage_claim:"🛄",baguette_bread:"🥖",balance_scale:"⚖️",balloon:"🎈",ballot_box:"🗳",ballot_box_with_check:"☑️",bamboo:"🎍",banana:"🍌",bangbang:"‼️",bank:"🏦",bar_chart:"📊",barber:"💈",baseball:"⚾️",basketball:"🏀",basketball_man:"⛹️",basketball_woman:"⛹️&zwj;♀️",bat:"🦇",bath:"🛀",bathtub:"🛁",battery:"🔋",beach_umbrella:"🏖",bear:"🐻",bed:"🛏",bee:"🐝",beer:"🍺",beers:"🍻",beetle:"🐞",beginner:"🔰",bell:"🔔",bellhop_bell:"🛎",bento:"🍱",biking_man:"🚴",bike:"🚲",biking_woman:"🚴&zwj;♀️",bikini:"👙",biohazard:"☣️",bird:"🐦",birthday:"🎂",black_circle:"⚫️",black_flag:"🏴",black_heart:"🖤",black_joker:"🃏",black_large_square:"⬛️",black_medium_small_square:"◾️",black_medium_square:"◼️",black_nib:"✒️",black_small_square:"▪️",black_square_button:"🔲",blonde_man:"👱",blonde_woman:"👱&zwj;♀️",blossom:"🌼",blowfish:"🐡",blue_book:"📘",blue_car:"🚙",blue_heart:"💙",blush:"😊",boar:"🐗",boat:"⛵️",bomb:"💣",book:"📖",bookmark:"🔖",bookmark_tabs:"📑",books:"📚",boom:"💥",boot:"👢",bouquet:"💐",bowing_man:"🙇",bow_and_arrow:"🏹",bowing_woman:"🙇&zwj;♀️",bowling:"🎳",boxing_glove:"🥊",boy:"👦",bread:"🍞",bride_with_veil:"👰",bridge_at_night:"🌉",briefcase:"💼",broken_heart:"💔",bug:"🐛",building_construction:"🏗",bulb:"💡",bullettrain_front:"🚅",bullettrain_side:"🚄",burrito:"🌯",bus:"🚌",business_suit_levitating:"🕴",busstop:"🚏",bust_in_silhouette:"👤",busts_in_silhouette:"👥",butterfly:"🦋",cactus:"🌵",cake:"🍰",calendar:"📆",call_me_hand:"🤙",calling:"📲",camel:"🐫",camera:"📷",camera_flash:"📸",camping:"🏕",cancer:"♋️",candle:"🕯",candy:"🍬",canoe:"🛶",capital_abcd:"🔠",capricorn:"♑️",car:"🚗",card_file_box:"🗃",card_index:"📇",card_index_dividers:"🗂",carousel_horse:"🎠",carrot:"🥕",cat:"🐱",cat2:"🐈",cd:"💿",chains:"⛓",champagne:"🍾",chart:"💹",chart_with_downwards_trend:"📉",chart_with_upwards_trend:"📈",checkered_flag:"🏁",cheese:"🧀",cherries:"🍒",cherry_blossom:"🌸",chestnut:"🌰",chicken:"🐔",children_crossing:"🚸",chipmunk:"🐿",chocolate_bar:"🍫",christmas_tree:"🎄",church:"⛪️",cinema:"🎦",circus_tent:"🎪",city_sunrise:"🌇",city_sunset:"🌆",cityscape:"🏙",cl:"🆑",clamp:"🗜",clap:"👏",clapper:"🎬",classical_building:"🏛",clinking_glasses:"🥂",clipboard:"📋",clock1:"🕐",clock10:"🕙",clock1030:"🕥",clock11:"🕚",clock1130:"🕦",clock12:"🕛",clock1230:"🕧",clock130:"🕜",clock2:"🕑",clock230:"🕝",clock3:"🕒",clock330:"🕞",clock4:"🕓",clock430:"🕟",clock5:"🕔",clock530:"🕠",clock6:"🕕",clock630:"🕡",clock7:"🕖",clock730:"🕢",clock8:"🕗",clock830:"🕣",clock9:"🕘",clock930:"🕤",closed_book:"📕",closed_lock_with_key:"🔐",closed_umbrella:"🌂",cloud:"☁️",cloud_with_lightning:"🌩",cloud_with_lightning_and_rain:"⛈",cloud_with_rain:"🌧",cloud_with_snow:"🌨",clown_face:"🤡",clubs:"♣️",cocktail:"🍸",coffee:"☕️",coffin:"⚰️",cold_sweat:"😰",comet:"☄️",computer:"💻",computer_mouse:"🖱",confetti_ball:"🎊",confounded:"😖",confused:"😕",congratulations:"㊗️",construction:"🚧",construction_worker_man:"👷",construction_worker_woman:"👷&zwj;♀️",control_knobs:"🎛",convenience_store:"🏪",cookie:"🍪",cool:"🆒",policeman:"👮",copyright:"©️",corn:"🌽",couch_and_lamp:"🛋",couple:"👫",couple_with_heart_woman_man:"💑",couple_with_heart_man_man:"👨&zwj;❤️&zwj;👨",couple_with_heart_woman_woman:"👩&zwj;❤️&zwj;👩",couplekiss_man_man:"👨&zwj;❤️&zwj;💋&zwj;👨",couplekiss_man_woman:"💏",couplekiss_woman_woman:"👩&zwj;❤️&zwj;💋&zwj;👩",cow:"🐮",cow2:"🐄",cowboy_hat_face:"🤠",crab:"🦀",crayon:"🖍",credit_card:"💳",crescent_moon:"🌙",cricket:"🏏",crocodile:"🐊",croissant:"🥐",crossed_fingers:"🤞",crossed_flags:"🎌",crossed_swords:"⚔️",crown:"👑",cry:"😢",crying_cat_face:"😿",crystal_ball:"🔮",cucumber:"🥒",cupid:"💘",curly_loop:"➰",currency_exchange:"💱",curry:"🍛",custard:"🍮",customs:"🛃",cyclone:"🌀",dagger:"🗡",dancer:"💃",dancing_women:"👯",dancing_men:"👯&zwj;♂️",dango:"🍡",dark_sunglasses:"🕶",dart:"🎯",dash:"💨",date:"📅",deciduous_tree:"🌳",deer:"🦌",department_store:"🏬",derelict_house:"🏚",desert:"🏜",desert_island:"🏝",desktop_computer:"🖥",male_detective:"🕵️",diamond_shape_with_a_dot_inside:"💠",diamonds:"♦️",disappointed:"😞",disappointed_relieved:"😥",dizzy:"💫",dizzy_face:"😵",do_not_litter:"🚯",dog:"🐶",dog2:"🐕",dollar:"💵",dolls:"🎎",dolphin:"🐬",door:"🚪",doughnut:"🍩",dove:"🕊",dragon:"🐉",dragon_face:"🐲",dress:"👗",dromedary_camel:"🐪",drooling_face:"🤤",droplet:"💧",drum:"🥁",duck:"🦆",dvd:"📀","e-mail":"📧",eagle:"🦅",ear:"👂",ear_of_rice:"🌾",earth_africa:"🌍",earth_americas:"🌎",earth_asia:"🌏",egg:"🥚",eggplant:"🍆",eight_pointed_black_star:"✴️",eight_spoked_asterisk:"✳️",electric_plug:"🔌",elephant:"🐘",email:"✉️",end:"🔚",envelope_with_arrow:"📩",euro:"💶",european_castle:"🏰",european_post_office:"🏤",evergreen_tree:"🌲",exclamation:"❗️",expressionless:"😑",eye:"👁",eye_speech_bubble:"👁&zwj;🗨",eyeglasses:"👓",eyes:"👀",face_with_head_bandage:"🤕",face_with_thermometer:"🤒",fist_oncoming:"👊",factory:"🏭",fallen_leaf:"🍂",family_man_woman_boy:"👪",family_man_boy:"👨&zwj;👦",family_man_boy_boy:"👨&zwj;👦&zwj;👦",family_man_girl:"👨&zwj;👧",family_man_girl_boy:"👨&zwj;👧&zwj;👦",family_man_girl_girl:"👨&zwj;👧&zwj;👧",family_man_man_boy:"👨&zwj;👨&zwj;👦",family_man_man_boy_boy:"👨&zwj;👨&zwj;👦&zwj;👦",family_man_man_girl:"👨&zwj;👨&zwj;👧",family_man_man_girl_boy:"👨&zwj;👨&zwj;👧&zwj;👦",family_man_man_girl_girl:"👨&zwj;👨&zwj;👧&zwj;👧",family_man_woman_boy_boy:"👨&zwj;👩&zwj;👦&zwj;👦",family_man_woman_girl:"👨&zwj;👩&zwj;👧",family_man_woman_girl_boy:"👨&zwj;👩&zwj;👧&zwj;👦",family_man_woman_girl_girl:"👨&zwj;👩&zwj;👧&zwj;👧",family_woman_boy:"👩&zwj;👦",family_woman_boy_boy:"👩&zwj;👦&zwj;👦",family_woman_girl:"👩&zwj;👧",family_woman_girl_boy:"👩&zwj;👧&zwj;👦",family_woman_girl_girl:"👩&zwj;👧&zwj;👧",family_woman_woman_boy:"👩&zwj;👩&zwj;👦",family_woman_woman_boy_boy:"👩&zwj;👩&zwj;👦&zwj;👦",family_woman_woman_girl:"👩&zwj;👩&zwj;👧",family_woman_woman_girl_boy:"👩&zwj;👩&zwj;👧&zwj;👦",family_woman_woman_girl_girl:"👩&zwj;👩&zwj;👧&zwj;👧",fast_forward:"⏩",fax:"📠",fearful:"😨",feet:"🐾",female_detective:"🕵️&zwj;♀️",ferris_wheel:"🎡",ferry:"⛴",field_hockey:"🏑",file_cabinet:"🗄",file_folder:"📁",film_projector:"📽",film_strip:"🎞",fire:"🔥",fire_engine:"🚒",fireworks:"🎆",first_quarter_moon:"🌓",first_quarter_moon_with_face:"🌛",fish:"🐟",fish_cake:"🍥",fishing_pole_and_fish:"🎣",fist_raised:"✊",fist_left:"🤛",fist_right:"🤜",flags:"🎏",flashlight:"🔦",fleur_de_lis:"⚜️",flight_arrival:"🛬",flight_departure:"🛫",floppy_disk:"💾",flower_playing_cards:"🎴",flushed:"😳",fog:"🌫",foggy:"🌁",football:"🏈",footprints:"👣",fork_and_knife:"🍴",fountain:"⛲️",fountain_pen:"🖋",four_leaf_clover:"🍀",fox_face:"🦊",framed_picture:"🖼",free:"🆓",fried_egg:"🍳",fried_shrimp:"🍤",fries:"🍟",frog:"🐸",frowning:"😦",frowning_face:"☹️",frowning_man:"🙍&zwj;♂️",frowning_woman:"🙍",middle_finger:"🖕",fuelpump:"⛽️",full_moon:"🌕",full_moon_with_face:"🌝",funeral_urn:"⚱️",game_die:"🎲",gear:"⚙️",gem:"💎",gemini:"♊️",ghost:"👻",gift:"🎁",gift_heart:"💝",girl:"👧",globe_with_meridians:"🌐",goal_net:"🥅",goat:"🐐",golf:"⛳️",golfing_man:"🏌️",golfing_woman:"🏌️&zwj;♀️",gorilla:"🦍",grapes:"🍇",green_apple:"🍏",green_book:"📗",green_heart:"💚",green_salad:"🥗",grey_exclamation:"❕",grey_question:"❔",grimacing:"😬",grin:"😁",grinning:"😀",guardsman:"💂",guardswoman:"💂&zwj;♀️",guitar:"🎸",gun:"🔫",haircut_woman:"💇",haircut_man:"💇&zwj;♂️",hamburger:"🍔",hammer:"🔨",hammer_and_pick:"⚒",hammer_and_wrench:"🛠",hamster:"🐹",hand:"✋",handbag:"👜",handshake:"🤝",hankey:"💩",hatched_chick:"🐥",hatching_chick:"🐣",headphones:"🎧",hear_no_evil:"🙉",heart:"❤️",heart_decoration:"💟",heart_eyes:"😍",heart_eyes_cat:"😻",heartbeat:"💓",heartpulse:"💗",hearts:"♥️",heavy_check_mark:"✔️",heavy_division_sign:"➗",heavy_dollar_sign:"💲",heavy_heart_exclamation:"❣️",heavy_minus_sign:"➖",heavy_multiplication_x:"✖️",heavy_plus_sign:"➕",helicopter:"🚁",herb:"🌿",hibiscus:"🌺",high_brightness:"🔆",high_heel:"👠",hocho:"🔪",hole:"🕳",honey_pot:"🍯",horse:"🐴",horse_racing:"🏇",hospital:"🏥",hot_pepper:"🌶",hotdog:"🌭",hotel:"🏨",hotsprings:"♨️",hourglass:"⌛️",hourglass_flowing_sand:"⏳",house:"🏠",house_with_garden:"🏡",houses:"🏘",hugs:"🤗",hushed:"😯",ice_cream:"🍨",ice_hockey:"🏒",ice_skate:"⛸",icecream:"🍦",id:"🆔",ideograph_advantage:"🉐",imp:"👿",inbox_tray:"📥",incoming_envelope:"📨",tipping_hand_woman:"💁",information_source:"ℹ️",innocent:"😇",interrobang:"⁉️",iphone:"📱",izakaya_lantern:"🏮",jack_o_lantern:"🎃",japan:"🗾",japanese_castle:"🏯",japanese_goblin:"👺",japanese_ogre:"👹",jeans:"👖",joy:"😂",joy_cat:"😹",joystick:"🕹",kaaba:"🕋",key:"🔑",keyboard:"⌨️",keycap_ten:"🔟",kick_scooter:"🛴",kimono:"👘",kiss:"💋",kissing:"😗",kissing_cat:"😽",kissing_closed_eyes:"😚",kissing_heart:"😘",kissing_smiling_eyes:"😙",kiwi_fruit:"🥝",koala:"🐨",koko:"🈁",label:"🏷",large_blue_circle:"🔵",large_blue_diamond:"🔷",large_orange_diamond:"🔶",last_quarter_moon:"🌗",last_quarter_moon_with_face:"🌜",latin_cross:"✝️",laughing:"😆",leaves:"🍃",ledger:"📒",left_luggage:"🛅",left_right_arrow:"↔️",leftwards_arrow_with_hook:"↩️",lemon:"🍋",leo:"♌️",leopard:"🐆",level_slider:"🎚",libra:"♎️",light_rail:"🚈",link:"🔗",lion:"🦁",lips:"👄",lipstick:"💄",lizard:"🦎",lock:"🔒",lock_with_ink_pen:"🔏",lollipop:"🍭",loop:"➿",loud_sound:"🔊",loudspeaker:"📢",love_hotel:"🏩",love_letter:"💌",low_brightness:"🔅",lying_face:"🤥",m:"Ⓜ️",mag:"🔍",mag_right:"🔎",mahjong:"🀄️",mailbox:"📫",mailbox_closed:"📪",mailbox_with_mail:"📬",mailbox_with_no_mail:"📭",man:"👨",man_artist:"👨&zwj;🎨",man_astronaut:"👨&zwj;🚀",man_cartwheeling:"🤸&zwj;♂️",man_cook:"👨&zwj;🍳",man_dancing:"🕺",man_facepalming:"🤦&zwj;♂️",man_factory_worker:"👨&zwj;🏭",man_farmer:"👨&zwj;🌾",man_firefighter:"👨&zwj;🚒",man_health_worker:"👨&zwj;⚕️",man_in_tuxedo:"🤵",man_judge:"👨&zwj;⚖️",man_juggling:"🤹&zwj;♂️",man_mechanic:"👨&zwj;🔧",man_office_worker:"👨&zwj;💼",man_pilot:"👨&zwj;✈️",man_playing_handball:"🤾&zwj;♂️",man_playing_water_polo:"🤽&zwj;♂️",man_scientist:"👨&zwj;🔬",man_shrugging:"🤷&zwj;♂️",man_singer:"👨&zwj;🎤",man_student:"👨&zwj;🎓",man_teacher:"👨&zwj;🏫",man_technologist:"👨&zwj;💻",man_with_gua_pi_mao:"👲",man_with_turban:"👳",tangerine:"🍊",mans_shoe:"👞",mantelpiece_clock:"🕰",maple_leaf:"🍁",martial_arts_uniform:"🥋",mask:"😷",massage_woman:"💆",massage_man:"💆&zwj;♂️",meat_on_bone:"🍖",medal_military:"🎖",medal_sports:"🏅",mega:"📣",melon:"🍈",memo:"📝",men_wrestling:"🤼&zwj;♂️",menorah:"🕎",mens:"🚹",metal:"🤘",metro:"🚇",microphone:"🎤",microscope:"🔬",milk_glass:"🥛",milky_way:"🌌",minibus:"🚐",minidisc:"💽",mobile_phone_off:"📴",money_mouth_face:"🤑",money_with_wings:"💸",moneybag:"💰",monkey:"🐒",monkey_face:"🐵",monorail:"🚝",moon:"🌔",mortar_board:"🎓",mosque:"🕌",motor_boat:"🛥",motor_scooter:"🛵",motorcycle:"🏍",motorway:"🛣",mount_fuji:"🗻",mountain:"⛰",mountain_biking_man:"🚵",mountain_biking_woman:"🚵&zwj;♀️",mountain_cableway:"🚠",mountain_railway:"🚞",mountain_snow:"🏔",mouse:"🐭",mouse2:"🐁",movie_camera:"🎥",moyai:"🗿",mrs_claus:"🤶",muscle:"💪",mushroom:"🍄",musical_keyboard:"🎹",musical_note:"🎵",musical_score:"🎼",mute:"🔇",nail_care:"💅",name_badge:"📛",national_park:"🏞",nauseated_face:"🤢",necktie:"👔",negative_squared_cross_mark:"❎",nerd_face:"🤓",neutral_face:"😐",new:"🆕",new_moon:"🌑",new_moon_with_face:"🌚",newspaper:"📰",newspaper_roll:"🗞",next_track_button:"⏭",ng:"🆖",no_good_man:"🙅&zwj;♂️",no_good_woman:"🙅",night_with_stars:"🌃",no_bell:"🔕",no_bicycles:"🚳",no_entry:"⛔️",no_entry_sign:"🚫",no_mobile_phones:"📵",no_mouth:"😶",no_pedestrians:"🚷",no_smoking:"🚭","non-potable_water":"🚱",nose:"👃",notebook:"📓",notebook_with_decorative_cover:"📔",notes:"🎶",nut_and_bolt:"🔩",o:"⭕️",o2:"🅾️",ocean:"🌊",octopus:"🐙",oden:"🍢",office:"🏢",oil_drum:"🛢",ok:"🆗",ok_hand:"👌",ok_man:"🙆&zwj;♂️",ok_woman:"🙆",old_key:"🗝",older_man:"👴",older_woman:"👵",om:"🕉",on:"🔛",oncoming_automobile:"🚘",oncoming_bus:"🚍",oncoming_police_car:"🚔",oncoming_taxi:"🚖",open_file_folder:"📂",open_hands:"👐",open_mouth:"😮",open_umbrella:"☂️",ophiuchus:"⛎",orange_book:"📙",orthodox_cross:"☦️",outbox_tray:"📤",owl:"🦉",ox:"🐂",package:"📦",page_facing_up:"📄",page_with_curl:"📃",pager:"📟",paintbrush:"🖌",palm_tree:"🌴",pancakes:"🥞",panda_face:"🐼",paperclip:"📎",paperclips:"🖇",parasol_on_ground:"⛱",parking:"🅿️",part_alternation_mark:"〽️",partly_sunny:"⛅️",passenger_ship:"🛳",passport_control:"🛂",pause_button:"⏸",peace_symbol:"☮️",peach:"🍑",peanuts:"🥜",pear:"🍐",pen:"🖊",pencil2:"✏️",penguin:"🐧",pensive:"😔",performing_arts:"🎭",persevere:"😣",person_fencing:"🤺",pouting_woman:"🙎",phone:"☎️",pick:"⛏",pig:"🐷",pig2:"🐖",pig_nose:"🐽",pill:"💊",pineapple:"🍍",ping_pong:"🏓",pisces:"♓️",pizza:"🍕",place_of_worship:"🛐",plate_with_cutlery:"🍽",play_or_pause_button:"⏯",point_down:"👇",point_left:"👈",point_right:"👉",point_up:"☝️",point_up_2:"👆",police_car:"🚓",policewoman:"👮&zwj;♀️",poodle:"🐩",popcorn:"🍿",post_office:"🏣",postal_horn:"📯",postbox:"📮",potable_water:"🚰",potato:"🥔",pouch:"👝",poultry_leg:"🍗",pound:"💷",rage:"😡",pouting_cat:"😾",pouting_man:"🙎&zwj;♂️",pray:"🙏",prayer_beads:"📿",pregnant_woman:"🤰",previous_track_button:"⏮",prince:"🤴",princess:"👸",printer:"🖨",purple_heart:"💜",purse:"👛",pushpin:"📌",put_litter_in_its_place:"🚮",question:"❓",rabbit:"🐰",rabbit2:"🐇",racehorse:"🐎",racing_car:"🏎",radio:"📻",radio_button:"🔘",radioactive:"☢️",railway_car:"🚃",railway_track:"🛤",rainbow:"🌈",rainbow_flag:"🏳️&zwj;🌈",raised_back_of_hand:"🤚",raised_hand_with_fingers_splayed:"🖐",raised_hands:"🙌",raising_hand_woman:"🙋",raising_hand_man:"🙋&zwj;♂️",ram:"🐏",ramen:"🍜",rat:"🐀",record_button:"⏺",recycle:"♻️",red_circle:"🔴",registered:"®️",relaxed:"☺️",relieved:"😌",reminder_ribbon:"🎗",repeat:"🔁",repeat_one:"🔂",rescue_worker_helmet:"⛑",restroom:"🚻",revolving_hearts:"💞",rewind:"⏪",rhinoceros:"🦏",ribbon:"🎀",rice:"🍚",rice_ball:"🍙",rice_cracker:"🍘",rice_scene:"🎑",right_anger_bubble:"🗯",ring:"💍",robot:"🤖",rocket:"🚀",rofl:"🤣",roll_eyes:"🙄",roller_coaster:"🎢",rooster:"🐓",rose:"🌹",rosette:"🏵",rotating_light:"🚨",round_pushpin:"📍",rowing_man:"🚣",rowing_woman:"🚣&zwj;♀️",rugby_football:"🏉",running_man:"🏃",running_shirt_with_sash:"🎽",running_woman:"🏃&zwj;♀️",sa:"🈂️",sagittarius:"♐️",sake:"🍶",sandal:"👡",santa:"🎅",satellite:"📡",saxophone:"🎷",school:"🏫",school_satchel:"🎒",scissors:"✂️",scorpion:"🦂",scorpius:"♏️",scream:"😱",scream_cat:"🙀",scroll:"📜",seat:"💺",secret:"㊙️",see_no_evil:"🙈",seedling:"🌱",selfie:"🤳",shallow_pan_of_food:"🥘",shamrock:"☘️",shark:"🦈",shaved_ice:"🍧",sheep:"🐑",shell:"🐚",shield:"🛡",shinto_shrine:"⛩",ship:"🚢",shirt:"👕",shopping:"🛍",shopping_cart:"🛒",shower:"🚿",shrimp:"🦐",signal_strength:"📶",six_pointed_star:"🔯",ski:"🎿",skier:"⛷",skull:"💀",skull_and_crossbones:"☠️",sleeping:"😴",sleeping_bed:"🛌",sleepy:"😪",slightly_frowning_face:"🙁",slightly_smiling_face:"🙂",slot_machine:"🎰",small_airplane:"🛩",small_blue_diamond:"🔹",small_orange_diamond:"🔸",small_red_triangle:"🔺",small_red_triangle_down:"🔻",smile:"😄",smile_cat:"😸",smiley:"😃",smiley_cat:"😺",smiling_imp:"😈",smirk:"😏",smirk_cat:"😼",smoking:"🚬",snail:"🐌",snake:"🐍",sneezing_face:"🤧",snowboarder:"🏂",snowflake:"❄️",snowman:"⛄️",snowman_with_snow:"☃️",sob:"😭",soccer:"⚽️",soon:"🔜",sos:"🆘",sound:"🔉",space_invader:"👾",spades:"♠️",spaghetti:"🍝",sparkle:"❇️",sparkler:"🎇",sparkles:"✨",sparkling_heart:"💖",speak_no_evil:"🙊",speaker:"🔈",speaking_head:"🗣",speech_balloon:"💬",speedboat:"🚤",spider:"🕷",spider_web:"🕸",spiral_calendar:"🗓",spiral_notepad:"🗒",spoon:"🥄",squid:"🦑",stadium:"🏟",star:"⭐️",star2:"🌟",star_and_crescent:"☪️",star_of_david:"✡️",stars:"🌠",station:"🚉",statue_of_liberty:"🗽",steam_locomotive:"🚂",stew:"🍲",stop_button:"⏹",stop_sign:"🛑",stopwatch:"⏱",straight_ruler:"📏",strawberry:"🍓",stuck_out_tongue:"😛",stuck_out_tongue_closed_eyes:"😝",stuck_out_tongue_winking_eye:"😜",studio_microphone:"🎙",stuffed_flatbread:"🥙",sun_behind_large_cloud:"🌥",sun_behind_rain_cloud:"🌦",sun_behind_small_cloud:"🌤",sun_with_face:"🌞",sunflower:"🌻",sunglasses:"😎",sunny:"☀️",sunrise:"🌅",sunrise_over_mountains:"🌄",surfing_man:"🏄",surfing_woman:"🏄&zwj;♀️",sushi:"🍣",suspension_railway:"🚟",sweat:"😓",sweat_drops:"💦",sweat_smile:"😅",sweet_potato:"🍠",swimming_man:"🏊",swimming_woman:"🏊&zwj;♀️",symbols:"🔣",synagogue:"🕍",syringe:"💉",taco:"🌮",tada:"🎉",tanabata_tree:"🎋",taurus:"♉️",taxi:"🚕",tea:"🍵",telephone_receiver:"📞",telescope:"🔭",tennis:"🎾",tent:"⛺️",thermometer:"🌡",thinking:"🤔",thought_balloon:"💭",ticket:"🎫",tickets:"🎟",tiger:"🐯",tiger2:"🐅",timer_clock:"⏲",tipping_hand_man:"💁&zwj;♂️",tired_face:"😫",tm:"™️",toilet:"🚽",tokyo_tower:"🗼",tomato:"🍅",tongue:"👅",top:"🔝",tophat:"🎩",tornado:"🌪",trackball:"🖲",tractor:"🚜",traffic_light:"🚥",train:"🚋",train2:"🚆",tram:"🚊",triangular_flag_on_post:"🚩",triangular_ruler:"📐",trident:"🔱",triumph:"😤",trolleybus:"🚎",trophy:"🏆",tropical_drink:"🍹",tropical_fish:"🐠",truck:"🚚",trumpet:"🎺",tulip:"🌷",tumbler_glass:"🥃",turkey:"🦃",turtle:"🐢",tv:"📺",twisted_rightwards_arrows:"🔀",two_hearts:"💕",two_men_holding_hands:"👬",two_women_holding_hands:"👭",u5272:"🈹",u5408:"🈴",u55b6:"🈺",u6307:"🈯️",u6708:"🈷️",u6709:"🈶",u6e80:"🈵",u7121:"🈚️",u7533:"🈸",u7981:"🈲",u7a7a:"🈳",umbrella:"☔️",unamused:"😒",underage:"🔞",unicorn:"🦄",unlock:"🔓",up:"🆙",upside_down_face:"🙃",v:"✌️",vertical_traffic_light:"🚦",vhs:"📼",vibration_mode:"📳",video_camera:"📹",video_game:"🎮",violin:"🎻",virgo:"♍️",volcano:"🌋",volleyball:"🏐",vs:"🆚",vulcan_salute:"🖖",walking_man:"🚶",walking_woman:"🚶&zwj;♀️",waning_crescent_moon:"🌘",waning_gibbous_moon:"🌖",warning:"⚠️",wastebasket:"🗑",watch:"⌚️",water_buffalo:"🐃",watermelon:"🍉",wave:"👋",wavy_dash:"〰️",waxing_crescent_moon:"🌒",wc:"🚾",weary:"😩",wedding:"💒",weight_lifting_man:"🏋️",weight_lifting_woman:"🏋️&zwj;♀️",whale:"🐳",whale2:"🐋",wheel_of_dharma:"☸️",wheelchair:"♿️",white_check_mark:"✅",white_circle:"⚪️",white_flag:"🏳️",white_flower:"💮",white_large_square:"⬜️",white_medium_small_square:"◽️",white_medium_square:"◻️",white_small_square:"▫️",white_square_button:"🔳",wilted_flower:"🥀",wind_chime:"🎐",wind_face:"🌬",wine_glass:"🍷",wink:"😉",wolf:"🐺",woman:"👩",woman_artist:"👩&zwj;🎨",woman_astronaut:"👩&zwj;🚀",woman_cartwheeling:"🤸&zwj;♀️",woman_cook:"👩&zwj;🍳",woman_facepalming:"🤦&zwj;♀️",woman_factory_worker:"👩&zwj;🏭",woman_farmer:"👩&zwj;🌾",woman_firefighter:"👩&zwj;🚒",woman_health_worker:"👩&zwj;⚕️",woman_judge:"👩&zwj;⚖️",woman_juggling:"🤹&zwj;♀️",woman_mechanic:"👩&zwj;🔧",woman_office_worker:"👩&zwj;💼",woman_pilot:"👩&zwj;✈️",woman_playing_handball:"🤾&zwj;♀️",woman_playing_water_polo:"🤽&zwj;♀️",woman_scientist:"👩&zwj;🔬",woman_shrugging:"🤷&zwj;♀️",woman_singer:"👩&zwj;🎤",woman_student:"👩&zwj;🎓",woman_teacher:"👩&zwj;🏫",woman_technologist:"👩&zwj;💻",woman_with_turban:"👳&zwj;♀️",womans_clothes:"👚",womans_hat:"👒",women_wrestling:"🤼&zwj;♀️",womens:"🚺",world_map:"🗺",worried:"😟",wrench:"🔧",writing_hand:"✍️",x:"❌",yellow_heart:"💛",yen:"💴",yin_yang:"☯️",yum:"😋",zap:"⚡️",zipper_mouth_face:"🤐",zzz:"💤",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:"<span style=\"font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>"},o.Converter=function(e){"use strict";var r={},t=[],a=[],n={},s=c,p={parsed:{},raw:"",format:""};function f(e,r){if(r=r||null,o.helper.isString(e)){if(r=e=o.helper.stdExtName(e),o.extensions[e])return console.warn("DEPRECATION WARNING: "+e+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),void function(e,r){"function"==typeof e&&(e=e(new o.Converter));o.helper.isArray(e)||(e=[e]);var n=d(e,r);if(!n.valid)throw Error(n.error);for(var s=0;s<e.length;++s)switch(e[s].type){case"lang":t.push(e[s]);break;case"output":a.push(e[s]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}(o.extensions[e],e);if(o.helper.isUndefined(i[e]))throw Error('Extension "'+e+'" could not be loaded. It was either not found or is not a valid extension.');e=i[e]}"function"==typeof e&&(e=e()),o.helper.isArray(e)||(e=[e]);var n=d(e,r);if(!n.valid)throw Error(n.error);for(var s=0;s<e.length;++s){switch(e[s].type){case"lang":t.push(e[s]);break;case"output":a.push(e[s])}if(e[s].hasOwnProperty("listeners"))for(var l in e[s].listeners)e[s].listeners.hasOwnProperty(l)&&h(l,e[s].listeners[l])}}function h(e,r){if(!o.helper.isString(e))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof e+" given");if("function"!=typeof r)throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof r+" given");n.hasOwnProperty(e)||(n[e]=[]),n[e].push(r)}!function(){for(var t in e=e||{},l)l.hasOwnProperty(t)&&(r[t]=l[t]);if("object"!=typeof e)throw Error("Converter expects the passed parameter to be an object, but "+typeof e+" was passed instead.");for(var a in e)e.hasOwnProperty(a)&&(r[a]=e[a]);r.extensions&&o.helper.forEach(r.extensions,f)}(),this._dispatch=function(e,r,t,a){if(n.hasOwnProperty(e))for(var o=0;o<n[e].length;++o){var s=n[e][o](e,r,this,t,a);s&&void 0!==s&&(r=s)}return r},this.listen=function(e,r){return h(e,r),this},this.makeHtml=function(e){if(!e)return e;var n={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:t,outputModifiers:a,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return e=(e=(e=(e=(e=e.replace(/¨/g,"¨T")).replace(/\$/g,"¨D")).replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/\u00A0/g,"&nbsp;"),r.smartIndentationFix&&(e=function(e){var r=e.match(/^\s*/)[0].length,t=new RegExp("^\\s{0,"+r+"}","gm");return e.replace(t,"")}(e)),e="\n\n"+e+"\n\n",e=(e=o.subParser("detab")(e,r,n)).replace(/^[ \t]+$/gm,""),o.helper.forEach(t,(function(t){e=o.subParser("runExtension")(t,e,r,n)})),e=o.subParser("metadata")(e,r,n),e=o.subParser("hashPreCodeTags")(e,r,n),e=o.subParser("githubCodeBlocks")(e,r,n),e=o.subParser("hashHTMLBlocks")(e,r,n),e=o.subParser("hashCodeTags")(e,r,n),e=o.subParser("stripLinkDefinitions")(e,r,n),e=o.subParser("blockGamut")(e,r,n),e=o.subParser("unhashHTMLSpans")(e,r,n),e=(e=(e=o.subParser("unescapeSpecialChars")(e,r,n)).replace(/¨D/g,"$$")).replace(/¨T/g,"¨"),e=o.subParser("completeHTMLDocument")(e,r,n),o.helper.forEach(a,(function(t){e=o.subParser("runExtension")(t,e,r,n)})),p=n.metadata,e},this.makeMarkdown=this.makeMd=function(e,r){if(e=(e=(e=e.replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/>[ \t]+</,">¨NBSP;<"),!r){if(!window||!window.document)throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");r=window.document}var t=r.createElement("div");t.innerHTML=e;var a={preList:function(e){for(var r=e.querySelectorAll("pre"),t=[],a=0;a<r.length;++a)if(1===r[a].childElementCount&&"code"===r[a].firstChild.tagName.toLowerCase()){var n=r[a].firstChild.innerHTML.trim(),s=r[a].firstChild.getAttribute("data-language")||"";if(""===s)for(var i=r[a].firstChild.className.split(" "),l=0;l<i.length;++l){var c=i[l].match(/^language-(.+)$/);if(null!==c){s=c[1];break}}n=o.helper.unescapeHTMLEntities(n),t.push(n),r[a].outerHTML='<precode language="'+s+'" precodenum="'+a.toString()+'"></precode>'}else t.push(r[a].innerHTML),r[a].innerHTML="",r[a].setAttribute("prenum",a.toString());return t}(t)};!function e(r){for(var t=0;t<r.childNodes.length;++t){var a=r.childNodes[t];3===a.nodeType?/\S/.test(a.nodeValue)?(a.nodeValue=a.nodeValue.split("\n").join(" "),a.nodeValue=a.nodeValue.replace(/(\s)+/g,"$1")):(r.removeChild(a),--t):1===a.nodeType&&e(a)}}(t);for(var n=t.childNodes,s="",i=0;i<n.length;i++)s+=o.subParser("makeMarkdown.node")(n[i],a);return s},this.setOption=function(e,t){r[e]=t},this.getOption=function(e){return r[e]},this.getOptions=function(){return r},this.addExtension=function(e,r){f(e,r=r||null)},this.useExtension=function(e){f(e)},this.setFlavor=function(e){if(!u.hasOwnProperty(e))throw Error(e+" flavor was not found");var t=u[e];for(var a in s=e,t)t.hasOwnProperty(a)&&(r[a]=t[a])},this.getFlavor=function(){return s},this.removeExtension=function(e){o.helper.isArray(e)||(e=[e]);for(var r=0;r<e.length;++r){for(var n=e[r],s=0;s<t.length;++s)t[s]===n&&t[s].splice(s,1);for(;0<a.length;++s)a[0]===n&&a[0].splice(s,1)}},this.getAllExtensions=function(){return{language:t,output:a}},this.getMetadata=function(e){return e?p.raw:p.parsed},this.getMetadataFormat=function(){return p.format},this._setMetadataPair=function(e,r){p.parsed[e]=r},this._setMetadataFormat=function(e){p.format=e},this._setMetadataRaw=function(e){p.raw=e}},o.subParser("anchors",(function(e,r,t){"use strict";var a=function(e,a,n,s,i,l,c){if(o.helper.isUndefined(c)&&(c=""),n=n.toLowerCase(),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)s="";else if(!s){if(n||(n=a.toLowerCase().replace(/ ?\n/g," ")),s="#"+n,o.helper.isUndefined(t.gUrls[n]))return e;s=t.gUrls[n],o.helper.isUndefined(t.gTitles[n])||(c=t.gTitles[n])}var u='<a href="'+(s=s.replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'"';return""!==c&&null!==c&&(u+=' title="'+(c=(c=c.replace(/"/g,"&quot;")).replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'"'),r.openLinksInNewWindow&&!/^#/.test(s)&&(u+=' rel="noopener noreferrer" target="¨E95Eblank"'),u+=">"+a+"</a>"};return e=(e=(e=(e=(e=t.converter._dispatch("anchors.before",e,r,t)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,a)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,a)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,a)).replace(/\[([^\[\]]+)]()()()()()/g,a),r.ghMentions&&(e=e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim,(function(e,t,a,n,s){if("\\"===a)return t+n;if(!o.helper.isString(r.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var i=r.ghMentionsLink.replace(/\{u}/g,s),l="";return r.openLinksInNewWindow&&(l=' rel="noopener noreferrer" target="¨E95Eblank"'),t+'<a href="'+i+'"'+l+">"+n+"</a>"}))),e=t.converter._dispatch("anchors.after",e,r,t)}));var h=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,g=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,m=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,_=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim,b=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,w=function(e){"use strict";return function(r,t,a,n,s,i,l){var c=a=a.replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback),u="",d="",p=t||"",f=l||"";return/^www\./i.test(a)&&(a=a.replace(/^www\./i,"http://www.")),e.excludeTrailingPunctuationFromURLs&&i&&(u=i),e.openLinksInNewWindow&&(d=' rel="noopener noreferrer" target="¨E95Eblank"'),p+'<a href="'+a+'"'+d+">"+c+"</a>"+u+f}},k=function(e,r){"use strict";return function(t,a,n){var s="mailto:";return a=a||"",n=o.subParser("unescapeSpecialChars")(n,e,r),e.encodeEmails?(s=o.helper.encodeEmailAddress(s+n),n=o.helper.encodeEmailAddress(n)):s+=n,a+'<a href="'+s+'">'+n+"</a>"}};o.subParser("autoLinks",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("autoLinks.before",e,r,t)).replace(m,w(r))).replace(b,k(r,t)),e=t.converter._dispatch("autoLinks.after",e,r,t)})),o.subParser("simplifiedAutoLinks",(function(e,r,t){"use strict";return r.simplifiedAutoLink?(e=t.converter._dispatch("simplifiedAutoLinks.before",e,r,t),e=(e=r.excludeTrailingPunctuationFromURLs?e.replace(g,w(r)):e.replace(h,w(r))).replace(_,k(r,t)),e=t.converter._dispatch("simplifiedAutoLinks.after",e,r,t)):e})),o.subParser("blockGamut",(function(e,r,t){"use strict";return e=t.converter._dispatch("blockGamut.before",e,r,t),e=o.subParser("blockQuotes")(e,r,t),e=o.subParser("headers")(e,r,t),e=o.subParser("horizontalRule")(e,r,t),e=o.subParser("lists")(e,r,t),e=o.subParser("codeBlocks")(e,r,t),e=o.subParser("tables")(e,r,t),e=o.subParser("hashHTMLBlocks")(e,r,t),e=o.subParser("paragraphs")(e,r,t),e=t.converter._dispatch("blockGamut.after",e,r,t)})),o.subParser("blockQuotes",(function(e,r,t){"use strict";e=t.converter._dispatch("blockQuotes.before",e,r,t),e+="\n\n";var a=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return r.splitAdjacentBlockquotes&&(a=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),e=e.replace(a,(function(e){return e=(e=(e=e.replace(/^[ \t]*>[ \t]?/gm,"")).replace(/¨0/g,"")).replace(/^[ \t]+$/gm,""),e=o.subParser("githubCodeBlocks")(e,r,t),e=(e=(e=o.subParser("blockGamut")(e,r,t)).replace(/(^|\n)/g,"$1  ")).replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,(function(e,r){var t=r;return t=(t=t.replace(/^  /gm,"¨0")).replace(/¨0/g,"")})),o.subParser("hashBlock")("<blockquote>\n"+e+"\n</blockquote>",r,t)})),e=t.converter._dispatch("blockQuotes.after",e,r,t)})),o.subParser("codeBlocks",(function(e,r,t){"use strict";e=t.converter._dispatch("codeBlocks.before",e,r,t);return e=(e=(e+="¨0").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g,(function(e,a,n){var s=a,i=n,l="\n";return s=o.subParser("outdent")(s,r,t),s=o.subParser("encodeCode")(s,r,t),s=(s=(s=o.subParser("detab")(s,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,""),r.omitExtraWLInCodeBlocks&&(l=""),s="<pre><code>"+s+l+"</code></pre>",o.subParser("hashBlock")(s,r,t)+i}))).replace(/¨0/,""),e=t.converter._dispatch("codeBlocks.after",e,r,t)})),o.subParser("codeSpans",(function(e,r,t){"use strict";return void 0===(e=t.converter._dispatch("codeSpans.before",e,r,t))&&(e=""),e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,(function(e,a,n,s){var i=s;return i=(i=i.replace(/^([ \t]*)/g,"")).replace(/[ \t]*$/g,""),i=a+"<code>"+(i=o.subParser("encodeCode")(i,r,t))+"</code>",i=o.subParser("hashHTMLSpans")(i,r,t)})),e=t.converter._dispatch("codeSpans.after",e,r,t)})),o.subParser("completeHTMLDocument",(function(e,r,t){"use strict";if(!r.completeHTMLDocument)return e;e=t.converter._dispatch("completeHTMLDocument.before",e,r,t);var a="html",n="<!DOCTYPE HTML>\n",o="",s='<meta charset="utf-8">\n',i="",l="";for(var c in void 0!==t.metadata.parsed.doctype&&(n="<!DOCTYPE "+t.metadata.parsed.doctype+">\n","html"!==(a=t.metadata.parsed.doctype.toString().toLowerCase())&&"html5"!==a||(s='<meta charset="utf-8">')),t.metadata.parsed)if(t.metadata.parsed.hasOwnProperty(c))switch(c.toLowerCase()){case"doctype":break;case"title":o="<title>"+t.metadata.parsed.title+"</title>\n";break;case"charset":s="html"===a||"html5"===a?'<meta charset="'+t.metadata.parsed.charset+'">\n':'<meta name="charset" content="'+t.metadata.parsed.charset+'">\n';break;case"language":case"lang":i=' lang="'+t.metadata.parsed[c]+'"',l+='<meta name="'+c+'" content="'+t.metadata.parsed[c]+'">\n';break;default:l+='<meta name="'+c+'" content="'+t.metadata.parsed[c]+'">\n'}return e=n+"<html"+i+">\n<head>\n"+o+s+l+"</head>\n<body>\n"+e.trim()+"\n</body>\n</html>",e=t.converter._dispatch("completeHTMLDocument.after",e,r,t)})),o.subParser("detab",(function(e,r,t){"use strict";return e=(e=(e=(e=(e=(e=t.converter._dispatch("detab.before",e,r,t)).replace(/\t(?=\t)/g,"    ")).replace(/\t/g,"¨A¨B")).replace(/¨B(.+?)¨A/g,(function(e,r){for(var t=r,a=4-t.length%4,n=0;n<a;n++)t+=" ";return t}))).replace(/¨A/g,"    ")).replace(/¨B/g,""),e=t.converter._dispatch("detab.after",e,r,t)})),o.subParser("ellipsis",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("ellipsis.before",e,r,t)).replace(/\.\.\./g,"…"),e=t.converter._dispatch("ellipsis.after",e,r,t)})),o.subParser("emoji",(function(e,r,t){"use strict";if(!r.emoji)return e;return e=(e=t.converter._dispatch("emoji.before",e,r,t)).replace(/:([\S]+?):/g,(function(e,r){return o.helper.emojis.hasOwnProperty(r)?o.helper.emojis[r]:e})),e=t.converter._dispatch("emoji.after",e,r,t)})),o.subParser("encodeAmpsAndAngles",(function(e,r,t){"use strict";return e=(e=(e=(e=(e=t.converter._dispatch("encodeAmpsAndAngles.before",e,r,t)).replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;")).replace(/<(?![a-z\/?$!])/gi,"&lt;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;"),e=t.converter._dispatch("encodeAmpsAndAngles.after",e,r,t)})),o.subParser("encodeBackslashEscapes",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("encodeBackslashEscapes.before",e,r,t)).replace(/\\(\\)/g,o.helper.escapeCharactersCallback)).replace(/\\([`*_{}\[\]()>#+.!~=|-])/g,o.helper.escapeCharactersCallback),e=t.converter._dispatch("encodeBackslashEscapes.after",e,r,t)})),o.subParser("encodeCode",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("encodeCode.before",e,r,t)).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,o.helper.escapeCharactersCallback),e=t.converter._dispatch("encodeCode.after",e,r,t)})),o.subParser("escapeSpecialCharsWithinTagAttributes",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",e,r,t)).replace(/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,(function(e){return e.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,o.helper.escapeCharactersCallback)}))).replace(/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi,(function(e){return e.replace(/([\\`*_~=|])/g,o.helper.escapeCharactersCallback)})),e=t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",e,r,t)})),o.subParser("githubCodeBlocks",(function(e,r,t){"use strict";return r.ghCodeBlocks?(e=t.converter._dispatch("githubCodeBlocks.before",e,r,t),e=(e=(e+="¨0").replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,(function(e,a,n,s){var i=r.omitExtraWLInCodeBlocks?"":"\n";return s=o.subParser("encodeCode")(s,r,t),s="<pre><code"+(n?' class="'+n+" language-"+n+'"':"")+">"+(s=(s=(s=o.subParser("detab")(s,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,""))+i+"</code></pre>",s=o.subParser("hashBlock")(s,r,t),"\n\n¨G"+(t.ghCodeBlocks.push({text:e,codeblock:s})-1)+"G\n\n"}))).replace(/¨0/,""),t.converter._dispatch("githubCodeBlocks.after",e,r,t)):e})),o.subParser("hashBlock",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("hashBlock.before",e,r,t)).replace(/(^\n+|\n+$)/g,""),e="\n\n¨K"+(t.gHtmlBlocks.push(e)-1)+"K\n\n",e=t.converter._dispatch("hashBlock.after",e,r,t)})),o.subParser("hashCodeTags",(function(e,r,t){"use strict";e=t.converter._dispatch("hashCodeTags.before",e,r,t);return e=o.helper.replaceRecursiveRegExp(e,(function(e,a,n,s){var i=n+o.subParser("encodeCode")(a,r,t)+s;return"¨C"+(t.gHtmlSpans.push(i)-1)+"C"}),"<code\\b[^>]*>","</code>","gim"),e=t.converter._dispatch("hashCodeTags.after",e,r,t)})),o.subParser("hashElement",(function(e,r,t){"use strict";return function(e,r){var a=r;return a=(a=(a=a.replace(/\n\n/g,"\n")).replace(/^\n/,"")).replace(/\n+$/g,""),a="\n\n¨K"+(t.gHtmlBlocks.push(a)-1)+"K\n\n"}})),o.subParser("hashHTMLBlocks",(function(e,r,t){"use strict";e=t.converter._dispatch("hashHTMLBlocks.before",e,r,t);var a=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],n=function(e,r,a,n){var o=e;return-1!==a.search(/\bmarkdown\b/)&&(o=a+t.converter.makeHtml(r)+n),"\n\n¨K"+(t.gHtmlBlocks.push(o)-1)+"K\n\n"};r.backslashEscapesHTMLTags&&(e=e.replace(/\\<(\/?[^>]+?)>/g,(function(e,r){return"&lt;"+r+"&gt;"})));for(var s=0;s<a.length;++s)for(var i,l=new RegExp("^ {0,3}(<"+a[s]+"\\b[^>]*>)","im"),c="<"+a[s]+"\\b[^>]*>",u="</"+a[s]+">";-1!==(i=o.helper.regexIndexOf(e,l));){var d=o.helper.splitAtIndex(e,i),p=o.helper.replaceRecursiveRegExp(d[1],n,c,u,"im");if(p===d[1])break;e=d[0].concat(p)}return e=e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,o.subParser("hashElement")(e,r,t)),e=(e=o.helper.replaceRecursiveRegExp(e,(function(e){return"\n\n¨K"+(t.gHtmlBlocks.push(e)-1)+"K\n\n"}),"^ {0,3}\x3c!--","--\x3e","gm")).replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,o.subParser("hashElement")(e,r,t)),e=t.converter._dispatch("hashHTMLBlocks.after",e,r,t)})),o.subParser("hashHTMLSpans",(function(e,r,t){"use strict";function a(e){return"¨C"+(t.gHtmlSpans.push(e)-1)+"C"}return e=(e=(e=(e=(e=t.converter._dispatch("hashHTMLSpans.before",e,r,t)).replace(/<[^>]+?\/>/gi,(function(e){return a(e)}))).replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,(function(e){return a(e)}))).replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,(function(e){return a(e)}))).replace(/<[^>]+?>/gi,(function(e){return a(e)})),e=t.converter._dispatch("hashHTMLSpans.after",e,r,t)})),o.subParser("unhashHTMLSpans",(function(e,r,t){"use strict";e=t.converter._dispatch("unhashHTMLSpans.before",e,r,t);for(var a=0;a<t.gHtmlSpans.length;++a){for(var n=t.gHtmlSpans[a],o=0;/¨C(\d+)C/.test(n);){var s=RegExp.$1;if(n=n.replace("¨C"+s+"C",t.gHtmlSpans[s]),10===o){console.error("maximum nesting of 10 spans reached!!!");break}++o}e=e.replace("¨C"+a+"C",n)}return e=t.converter._dispatch("unhashHTMLSpans.after",e,r,t)})),o.subParser("hashPreCodeTags",(function(e,r,t){"use strict";e=t.converter._dispatch("hashPreCodeTags.before",e,r,t);return e=o.helper.replaceRecursiveRegExp(e,(function(e,a,n,s){var i=n+o.subParser("encodeCode")(a,r,t)+s;return"\n\n¨G"+(t.ghCodeBlocks.push({text:e,codeblock:i})-1)+"G\n\n"}),"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),e=t.converter._dispatch("hashPreCodeTags.after",e,r,t)})),o.subParser("headers",(function(e,r,t){"use strict";e=t.converter._dispatch("headers.before",e,r,t);var a=isNaN(parseInt(r.headerLevelStart))?1:parseInt(r.headerLevelStart),n=r.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,s=r.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;e=(e=e.replace(n,(function(e,n){var s=o.subParser("spanGamut")(n,r,t),i=r.noHeaderId?"":' id="'+l(n)+'"',c="<h"+a+i+">"+s+"</h"+a+">";return o.subParser("hashBlock")(c,r,t)}))).replace(s,(function(e,n){var s=o.subParser("spanGamut")(n,r,t),i=r.noHeaderId?"":' id="'+l(n)+'"',c=a+1,u="<h"+c+i+">"+s+"</h"+c+">";return o.subParser("hashBlock")(u,r,t)}));var i=r.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;function l(e){var a,n;if(r.customizedHeaderId){var s=e.match(/\{([^{]+?)}\s*$/);s&&s[1]&&(e=s[1])}return a=e,n=o.helper.isString(r.prefixHeaderId)?r.prefixHeaderId:!0===r.prefixHeaderId?"section-":"",r.rawPrefixHeaderId||(a=n+a),a=r.ghCompatibleHeaderId?a.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():r.rawHeaderId?a.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"¨").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():a.replace(/[^\w]/g,"").toLowerCase(),r.rawPrefixHeaderId&&(a=n+a),t.hashLinkCounts[a]?a=a+"-"+t.hashLinkCounts[a]++:t.hashLinkCounts[a]=1,a}return e=e.replace(i,(function(e,n,s){var i=s;r.customizedHeaderId&&(i=s.replace(/\s?\{([^{]+?)}\s*$/,""));var c=o.subParser("spanGamut")(i,r,t),u=r.noHeaderId?"":' id="'+l(s)+'"',d=a-1+n.length,p="<h"+d+u+">"+c+"</h"+d+">";return o.subParser("hashBlock")(p,r,t)})),e=t.converter._dispatch("headers.after",e,r,t)})),o.subParser("horizontalRule",(function(e,r,t){"use strict";e=t.converter._dispatch("horizontalRule.before",e,r,t);var a=o.subParser("hashBlock")("<hr />",r,t);return e=(e=(e=e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,a)).replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,a)).replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,a),e=t.converter._dispatch("horizontalRule.after",e,r,t)})),o.subParser("images",(function(e,r,t){"use strict";function a(e,r,a,n,s,i,l,c){var u=t.gUrls,d=t.gTitles,p=t.gDimensions;if(a=a.toLowerCase(),c||(c=""),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)n="";else if(""===n||null===n){if(""!==a&&null!==a||(a=r.toLowerCase().replace(/ ?\n/g," ")),n="#"+a,o.helper.isUndefined(u[a]))return e;n=u[a],o.helper.isUndefined(d[a])||(c=d[a]),o.helper.isUndefined(p[a])||(s=p[a].width,i=p[a].height)}r=r.replace(/"/g,"&quot;").replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback);var f='<img src="'+(n=n.replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'" alt="'+r+'"';return c&&o.helper.isString(c)&&(f+=' title="'+(c=c.replace(/"/g,"&quot;").replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'"'),s&&i&&(f+=' width="'+(s="*"===s?"auto":s)+'"',f+=' height="'+(i="*"===i?"auto":i)+'"'),f+=" />"}return e=(e=(e=(e=(e=(e=t.converter._dispatch("images.before",e,r,t)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,a)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,(function(e,r,t,n,o,s,i,l){return a(e,r,t,n=n.replace(/\s/g,""),o,s,i,l)}))).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,a)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,a)).replace(/!\[([^\[\]]+)]()()()()()/g,a),e=t.converter._dispatch("images.after",e,r,t)})),o.subParser("italicsAndBold",(function(e,r,t){"use strict";function a(e,r,t){return r+e+t}return e=t.converter._dispatch("italicsAndBold.before",e,r,t),e=r.literalMidWordUnderscores?(e=(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,(function(e,r){return a(r,"<strong><em>","</em></strong>")}))).replace(/\b__(\S[\s\S]*?)__\b/g,(function(e,r){return a(r,"<strong>","</strong>")}))).replace(/\b_(\S[\s\S]*?)_\b/g,(function(e,r){return a(r,"<em>","</em>")})):(e=(e=e.replace(/___(\S[\s\S]*?)___/g,(function(e,r){return/\S$/.test(r)?a(r,"<strong><em>","</em></strong>"):e}))).replace(/__(\S[\s\S]*?)__/g,(function(e,r){return/\S$/.test(r)?a(r,"<strong>","</strong>"):e}))).replace(/_([^\s_][\s\S]*?)_/g,(function(e,r){return/\S$/.test(r)?a(r,"<em>","</em>"):e})),e=r.literalMidWordAsterisks?(e=(e=e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,(function(e,r,t){return a(t,r+"<strong><em>","</em></strong>")}))).replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,(function(e,r,t){return a(t,r+"<strong>","</strong>")}))).replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,(function(e,r,t){return a(t,r+"<em>","</em>")})):(e=(e=e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,(function(e,r){return/\S$/.test(r)?a(r,"<strong><em>","</em></strong>"):e}))).replace(/\*\*(\S[\s\S]*?)\*\*/g,(function(e,r){return/\S$/.test(r)?a(r,"<strong>","</strong>"):e}))).replace(/\*([^\s*][\s\S]*?)\*/g,(function(e,r){return/\S$/.test(r)?a(r,"<em>","</em>"):e})),e=t.converter._dispatch("italicsAndBold.after",e,r,t)})),o.subParser("lists",(function(e,r,t){"use strict";function a(e,a){t.gListLevel++,e=e.replace(/\n{2,}$/,"\n");var n=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,s=/\n[ \t]*\n(?!¨0)/.test(e+="¨0");return r.disableForced4SpacesIndentedSublists&&(n=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),e=(e=e.replace(n,(function(e,a,n,i,l,c,u){u=u&&""!==u.trim();var d=o.subParser("outdent")(l,r,t),p="";return c&&r.tasklists&&(p=' class="task-list-item" style="list-style-type: none;"',d=d.replace(/^[ \t]*\[(x|X| )?]/m,(function(){var e='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return u&&(e+=" checked"),e+=">"}))),d=d.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,(function(e){return"¨A"+e})),a||d.search(/\n{2,}/)>-1?(d=o.subParser("githubCodeBlocks")(d,r,t),d=o.subParser("blockGamut")(d,r,t)):(d=(d=o.subParser("lists")(d,r,t)).replace(/\n$/,""),d=(d=o.subParser("hashHTMLBlocks")(d,r,t)).replace(/\n\n+/g,"\n\n"),d=s?o.subParser("paragraphs")(d,r,t):o.subParser("spanGamut")(d,r,t)),d="<li"+p+">"+(d=d.replace("¨A",""))+"</li>\n"}))).replace(/¨0/g,""),t.gListLevel--,a&&(e=e.replace(/\s+$/,"")),e}function n(e,r){if("ol"===r){var t=e.match(/^ *(\d+)\./);if(t&&"1"!==t[1])return' start="'+t[1]+'"'}return""}function s(e,t,o){var s=r.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,i=r.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,l="ul"===t?s:i,c="";if(-1!==e.search(l))!function r(u){var d=u.search(l),p=n(e,t);-1!==d?(c+="\n\n<"+t+p+">\n"+a(u.slice(0,d),!!o)+"</"+t+">\n",l="ul"===(t="ul"===t?"ol":"ul")?s:i,r(u.slice(d))):c+="\n\n<"+t+p+">\n"+a(u,!!o)+"</"+t+">\n"}(e);else{var u=n(e,t);c="\n\n<"+t+u+">\n"+a(e,!!o)+"</"+t+">\n"}return c}return e=t.converter._dispatch("lists.before",e,r,t),e+="¨0",e=(e=t.gListLevel?e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,(function(e,r,t){return s(r,t.search(/[*+-]/g)>-1?"ul":"ol",!0)})):e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,(function(e,r,t,a){return s(t,a.search(/[*+-]/g)>-1?"ul":"ol",!1)}))).replace(/¨0/,""),e=t.converter._dispatch("lists.after",e,r,t)})),o.subParser("metadata",(function(e,r,t){"use strict";if(!r.metadata)return e;function a(e){t.metadata.raw=e,(e=(e=e.replace(/&/g,"&amp;").replace(/"/g,"&quot;")).replace(/\n {4}/g," ")).replace(/^([\S ]+): +([\s\S]+?)$/gm,(function(e,r,a){return t.metadata.parsed[r]=a,""}))}return e=(e=(e=(e=t.converter._dispatch("metadata.before",e,r,t)).replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,(function(e,r,t){return a(t),"¨M"}))).replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,(function(e,r,n){return r&&(t.metadata.format=r),a(n),"¨M"}))).replace(/¨M/g,""),e=t.converter._dispatch("metadata.after",e,r,t)})),o.subParser("outdent",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("outdent.before",e,r,t)).replace(/^(\t|[ ]{1,4})/gm,"¨0")).replace(/¨0/g,""),e=t.converter._dispatch("outdent.after",e,r,t)})),o.subParser("paragraphs",(function(e,r,t){"use strict";for(var a=(e=(e=(e=t.converter._dispatch("paragraphs.before",e,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,"")).split(/\n{2,}/g),n=[],s=a.length,i=0;i<s;i++){var l=a[i];l.search(/¨(K|G)(\d+)\1/g)>=0?n.push(l):l.search(/\S/)>=0&&(l=(l=o.subParser("spanGamut")(l,r,t)).replace(/^([ \t]*)/g,"<p>"),l+="</p>",n.push(l))}for(s=n.length,i=0;i<s;i++){for(var c="",u=n[i],d=!1;/¨(K|G)(\d+)\1/.test(u);){var p=RegExp.$1,f=RegExp.$2;c=(c="K"===p?t.gHtmlBlocks[f]:d?o.subParser("encodeCode")(t.ghCodeBlocks[f].text,r,t):t.ghCodeBlocks[f].codeblock).replace(/\$/g,"$$$$"),u=u.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,c),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(u)&&(d=!0)}n[i]=u}return e=(e=(e=n.join("\n")).replace(/^\n+/g,"")).replace(/\n+$/g,""),t.converter._dispatch("paragraphs.after",e,r,t)})),o.subParser("runExtension",(function(e,r,t,a){"use strict";if(e.filter)r=e.filter(r,a.converter,t);else if(e.regex){var n=e.regex;n instanceof RegExp||(n=new RegExp(n,"g")),r=r.replace(n,e.replace)}return r})),o.subParser("spanGamut",(function(e,r,t){"use strict";return e=t.converter._dispatch("spanGamut.before",e,r,t),e=o.subParser("codeSpans")(e,r,t),e=o.subParser("escapeSpecialCharsWithinTagAttributes")(e,r,t),e=o.subParser("encodeBackslashEscapes")(e,r,t),e=o.subParser("images")(e,r,t),e=o.subParser("anchors")(e,r,t),e=o.subParser("autoLinks")(e,r,t),e=o.subParser("simplifiedAutoLinks")(e,r,t),e=o.subParser("emoji")(e,r,t),e=o.subParser("underline")(e,r,t),e=o.subParser("italicsAndBold")(e,r,t),e=o.subParser("strikethrough")(e,r,t),e=o.subParser("ellipsis")(e,r,t),e=o.subParser("hashHTMLSpans")(e,r,t),e=o.subParser("encodeAmpsAndAngles")(e,r,t),r.simpleLineBreaks?/\n\n¨K/.test(e)||(e=e.replace(/\n+/g,"<br />\n")):e=e.replace(/  +\n/g,"<br />\n"),e=t.converter._dispatch("spanGamut.after",e,r,t)})),o.subParser("strikethrough",(function(e,r,t){"use strict";return r.strikethrough&&(e=(e=t.converter._dispatch("strikethrough.before",e,r,t)).replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,(function(e,a){return function(e){return r.simplifiedAutoLink&&(e=o.subParser("simplifiedAutoLinks")(e,r,t)),"<del>"+e+"</del>"}(a)})),e=t.converter._dispatch("strikethrough.after",e,r,t)),e})),o.subParser("stripLinkDefinitions",(function(e,r,t){"use strict";var a=function(e,a,n,s,i,l,c){return a=a.toLowerCase(),n.match(/^data:.+?\/.+?;base64,/)?t.gUrls[a]=n.replace(/\s/g,""):t.gUrls[a]=o.subParser("encodeAmpsAndAngles")(n,r,t),l?l+c:(c&&(t.gTitles[a]=c.replace(/"|'/g,"&quot;")),r.parseImgDimensions&&s&&i&&(t.gDimensions[a]={width:s,height:i}),"")};return e=(e=(e=(e+="¨0").replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm,a)).replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,a)).replace(/¨0/,"")})),o.subParser("tables",(function(e,r,t){"use strict";if(!r.tables)return e;function a(e,a){return"<td"+a+">"+o.subParser("spanGamut")(e,r,t)+"</td>\n"}function n(e){var n,s=e.split("\n");for(n=0;n<s.length;++n)/^ {0,3}\|/.test(s[n])&&(s[n]=s[n].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(s[n])&&(s[n]=s[n].replace(/\|[ \t]*$/,"")),s[n]=o.subParser("codeSpans")(s[n],r,t);var i,l,c,u,d=s[0].split("|").map((function(e){return e.trim()})),p=s[1].split("|").map((function(e){return e.trim()})),f=[],h=[],g=[],m=[];for(s.shift(),s.shift(),n=0;n<s.length;++n)""!==s[n].trim()&&f.push(s[n].split("|").map((function(e){return e.trim()})));if(d.length<p.length)return e;for(n=0;n<p.length;++n)g.push((i=p[n],/^:[ \t]*--*$/.test(i)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(i)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(i)?' style="text-align:center;"':""));for(n=0;n<d.length;++n)o.helper.isUndefined(g[n])&&(g[n]=""),h.push((l=d[n],c=g[n],u=void 0,u="",l=l.trim(),(r.tablesHeaderId||r.tableHeaderId)&&(u=' id="'+l.replace(/ /g,"_").toLowerCase()+'"'),"<th"+u+c+">"+(l=o.subParser("spanGamut")(l,r,t))+"</th>\n"));for(n=0;n<f.length;++n){for(var _=[],b=0;b<h.length;++b)o.helper.isUndefined(f[n][b]),_.push(a(f[n][b],g[b]));m.push(_)}return function(e,r){for(var t="<table>\n<thead>\n<tr>\n",a=e.length,n=0;n<a;++n)t+=e[n];for(t+="</tr>\n</thead>\n<tbody>\n",n=0;n<r.length;++n){t+="<tr>\n";for(var o=0;o<a;++o)t+=r[n][o];t+="</tr>\n"}return t+"</tbody>\n</table>\n"}(h,m)}return e=(e=(e=(e=t.converter._dispatch("tables.before",e,r,t)).replace(/\\(\|)/g,o.helper.escapeCharactersCallback)).replace(/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,n)).replace(/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm,n),e=t.converter._dispatch("tables.after",e,r,t)})),o.subParser("underline",(function(e,r,t){"use strict";return r.underline?(e=t.converter._dispatch("underline.before",e,r,t),e=(e=r.literalMidWordUnderscores?(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,(function(e,r){return"<u>"+r+"</u>"}))).replace(/\b__(\S[\s\S]*?)__\b/g,(function(e,r){return"<u>"+r+"</u>"})):(e=e.replace(/___(\S[\s\S]*?)___/g,(function(e,r){return/\S$/.test(r)?"<u>"+r+"</u>":e}))).replace(/__(\S[\s\S]*?)__/g,(function(e,r){return/\S$/.test(r)?"<u>"+r+"</u>":e}))).replace(/(_)/g,o.helper.escapeCharactersCallback),e=t.converter._dispatch("underline.after",e,r,t)):e})),o.subParser("unescapeSpecialChars",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("unescapeSpecialChars.before",e,r,t)).replace(/¨E(\d+)E/g,(function(e,r){var t=parseInt(r);return String.fromCharCode(t)})),e=t.converter._dispatch("unescapeSpecialChars.after",e,r,t)})),o.subParser("makeMarkdown.blockquote",(function(e,r){"use strict";var t="";if(e.hasChildNodes())for(var a=e.childNodes,n=a.length,s=0;s<n;++s){var i=o.subParser("makeMarkdown.node")(a[s],r);""!==i&&(t+=i)}return t="> "+(t=t.trim()).split("\n").join("\n> ")})),o.subParser("makeMarkdown.codeBlock",(function(e,r){"use strict";var t=e.getAttribute("language"),a=e.getAttribute("precodenum");return"```"+t+"\n"+r.preList[a]+"\n```"})),o.subParser("makeMarkdown.codeSpan",(function(e){"use strict";return"`"+e.innerHTML+"`"})),o.subParser("makeMarkdown.emphasis",(function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="*";for(var a=e.childNodes,n=a.length,s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r);t+="*"}return t})),o.subParser("makeMarkdown.header",(function(e,r,t){"use strict";var a=new Array(t+1).join("#"),n="";if(e.hasChildNodes()){n=a+" ";for(var s=e.childNodes,i=s.length,l=0;l<i;++l)n+=o.subParser("makeMarkdown.node")(s[l],r)}return n})),o.subParser("makeMarkdown.hr",(function(){"use strict";return"---"})),o.subParser("makeMarkdown.image",(function(e){"use strict";var r="";return e.hasAttribute("src")&&(r+="!["+e.getAttribute("alt")+"](",r+="<"+e.getAttribute("src")+">",e.hasAttribute("width")&&e.hasAttribute("height")&&(r+=" ="+e.getAttribute("width")+"x"+e.getAttribute("height")),e.hasAttribute("title")&&(r+=' "'+e.getAttribute("title")+'"'),r+=")"),r})),o.subParser("makeMarkdown.links",(function(e,r){"use strict";var t="";if(e.hasChildNodes()&&e.hasAttribute("href")){var a=e.childNodes,n=a.length;t="[";for(var s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r);t+="](",t+="<"+e.getAttribute("href")+">",e.hasAttribute("title")&&(t+=' "'+e.getAttribute("title")+'"'),t+=")"}return t})),o.subParser("makeMarkdown.list",(function(e,r,t){"use strict";var a="";if(!e.hasChildNodes())return"";for(var n=e.childNodes,s=n.length,i=e.getAttribute("start")||1,l=0;l<s;++l)if(void 0!==n[l].tagName&&"li"===n[l].tagName.toLowerCase()){a+=("ol"===t?i.toString()+". ":"- ")+o.subParser("makeMarkdown.listItem")(n[l],r),++i}return(a+="\n\x3c!-- --\x3e\n").trim()})),o.subParser("makeMarkdown.listItem",(function(e,r){"use strict";for(var t="",a=e.childNodes,n=a.length,s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r);return/\n$/.test(t)?t=t.split("\n").join("\n    ").replace(/^ {4}$/gm,"").replace(/\n\n+/g,"\n\n"):t+="\n",t})),o.subParser("makeMarkdown.node",(function(e,r,t){"use strict";t=t||!1;var a="";if(3===e.nodeType)return o.subParser("makeMarkdown.txt")(e,r);if(8===e.nodeType)return"\x3c!--"+e.data+"--\x3e\n\n";if(1!==e.nodeType)return"";switch(e.tagName.toLowerCase()){case"h1":t||(a=o.subParser("makeMarkdown.header")(e,r,1)+"\n\n");break;case"h2":t||(a=o.subParser("makeMarkdown.header")(e,r,2)+"\n\n");break;case"h3":t||(a=o.subParser("makeMarkdown.header")(e,r,3)+"\n\n");break;case"h4":t||(a=o.subParser("makeMarkdown.header")(e,r,4)+"\n\n");break;case"h5":t||(a=o.subParser("makeMarkdown.header")(e,r,5)+"\n\n");break;case"h6":t||(a=o.subParser("makeMarkdown.header")(e,r,6)+"\n\n");break;case"p":t||(a=o.subParser("makeMarkdown.paragraph")(e,r)+"\n\n");break;case"blockquote":t||(a=o.subParser("makeMarkdown.blockquote")(e,r)+"\n\n");break;case"hr":t||(a=o.subParser("makeMarkdown.hr")(e,r)+"\n\n");break;case"ol":t||(a=o.subParser("makeMarkdown.list")(e,r,"ol")+"\n\n");break;case"ul":t||(a=o.subParser("makeMarkdown.list")(e,r,"ul")+"\n\n");break;case"precode":t||(a=o.subParser("makeMarkdown.codeBlock")(e,r)+"\n\n");break;case"pre":t||(a=o.subParser("makeMarkdown.pre")(e,r)+"\n\n");break;case"table":t||(a=o.subParser("makeMarkdown.table")(e,r)+"\n\n");break;case"code":a=o.subParser("makeMarkdown.codeSpan")(e,r);break;case"em":case"i":a=o.subParser("makeMarkdown.emphasis")(e,r);break;case"strong":case"b":a=o.subParser("makeMarkdown.strong")(e,r);break;case"del":a=o.subParser("makeMarkdown.strikethrough")(e,r);break;case"a":a=o.subParser("makeMarkdown.links")(e,r);break;case"img":a=o.subParser("makeMarkdown.image")(e,r);break;default:a=e.outerHTML+"\n\n"}return a})),o.subParser("makeMarkdown.paragraph",(function(e,r){"use strict";var t="";if(e.hasChildNodes())for(var a=e.childNodes,n=a.length,s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r);return t=t.trim()})),o.subParser("makeMarkdown.pre",(function(e,r){"use strict";var t=e.getAttribute("prenum");return"<pre>"+r.preList[t]+"</pre>"})),o.subParser("makeMarkdown.strikethrough",(function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="~~";for(var a=e.childNodes,n=a.length,s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r);t+="~~"}return t})),o.subParser("makeMarkdown.strong",(function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="**";for(var a=e.childNodes,n=a.length,s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r);t+="**"}return t})),o.subParser("makeMarkdown.table",(function(e,r){"use strict";var t,a,n="",s=[[],[]],i=e.querySelectorAll("thead>tr>th"),l=e.querySelectorAll("tbody>tr");for(t=0;t<i.length;++t){var c=o.subParser("makeMarkdown.tableCell")(i[t],r),u="---";if(i[t].hasAttribute("style"))switch(i[t].getAttribute("style").toLowerCase().replace(/\s/g,"")){case"text-align:left;":u=":---";break;case"text-align:right;":u="---:";break;case"text-align:center;":u=":---:"}s[0][t]=c.trim(),s[1][t]=u}for(t=0;t<l.length;++t){var d=s.push([])-1,p=l[t].getElementsByTagName("td");for(a=0;a<i.length;++a){var f=" ";void 0!==p[a]&&(f=o.subParser("makeMarkdown.tableCell")(p[a],r)),s[d].push(f)}}var h=3;for(t=0;t<s.length;++t)for(a=0;a<s[t].length;++a){var g=s[t][a].length;g>h&&(h=g)}for(t=0;t<s.length;++t){for(a=0;a<s[t].length;++a)1===t?":"===s[t][a].slice(-1)?s[t][a]=o.helper.padEnd(s[t][a].slice(-1),h-1,"-")+":":s[t][a]=o.helper.padEnd(s[t][a],h,"-"):s[t][a]=o.helper.padEnd(s[t][a],h);n+="| "+s[t].join(" | ")+" |\n"}return n.trim()})),o.subParser("makeMarkdown.tableCell",(function(e,r){"use strict";var t="";if(!e.hasChildNodes())return"";for(var a=e.childNodes,n=a.length,s=0;s<n;++s)t+=o.subParser("makeMarkdown.node")(a[s],r,!0);return t.trim()})),o.subParser("makeMarkdown.txt",(function(e){"use strict";var r=e.nodeValue;return r=(r=r.replace(/ +/g," ")).replace(/¨NBSP;/g," "),r=(r=(r=(r=(r=(r=(r=(r=(r=o.helper.unescapeHTMLEntities(r)).replace(/([*_~|`])/g,"\\$1")).replace(/^(\s*)>/g,"\\$1>")).replace(/^#/gm,"\\#")).replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3")).replace(/^( {0,3}\d+)\./gm,"$1\\.")).replace(/^( {0,3})([+-])/gm,"$1\\$2")).replace(/]([\s]*)\(/g,"\\]$1\\(")).replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:")}));void 0===(a=function(){"use strict";return o}.call(r,t,r,e))||(e.exports=a)}).call(this)},"./node_modules/css-color-list/node_modules/css-color-names/css-color-names.json":e=>{"use strict";e.exports=JSON.parse('{"aqua":"#00ffff","aliceblue":"#f0f8ff","antiquewhite":"#faebd7","black":"#000000","blue":"#0000ff","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgreen":"#006400","darkturquoise":"#00ced1","deepskyblue":"#00bfff","green":"#008000","lime":"#00ff00","mediumblue":"#0000cd","mediumspringgreen":"#00fa9a","navy":"#000080","springgreen":"#00ff7f","teal":"#008080","midnightblue":"#191970","dodgerblue":"#1e90ff","lightseagreen":"#20b2aa","forestgreen":"#228b22","seagreen":"#2e8b57","darkslategray":"#2f4f4f","darkslategrey":"#2f4f4f","limegreen":"#32cd32","mediumseagreen":"#3cb371","turquoise":"#40e0d0","royalblue":"#4169e1","steelblue":"#4682b4","darkslateblue":"#483d8b","mediumturquoise":"#48d1cc","indigo":"#4b0082","darkolivegreen":"#556b2f","cadetblue":"#5f9ea0","cornflowerblue":"#6495ed","mediumaquamarine":"#66cdaa","dimgray":"#696969","dimgrey":"#696969","slateblue":"#6a5acd","olivedrab":"#6b8e23","slategray":"#708090","slategrey":"#708090","lightslategray":"#778899","lightslategrey":"#778899","mediumslateblue":"#7b68ee","lawngreen":"#7cfc00","aquamarine":"#7fffd4","chartreuse":"#7fff00","gray":"#808080","grey":"#808080","maroon":"#800000","olive":"#808000","purple":"#800080","lightskyblue":"#87cefa","skyblue":"#87ceeb","blueviolet":"#8a2be2","darkmagenta":"#8b008b","darkred":"#8b0000","saddlebrown":"#8b4513","darkseagreen":"#8fbc8f","lightgreen":"#90ee90","mediumpurple":"#9370db","darkviolet":"#9400d3","palegreen":"#98fb98","darkorchid":"#9932cc","yellowgreen":"#9acd32","sienna":"#a0522d","brown":"#a52a2a","darkgray":"#a9a9a9","darkgrey":"#a9a9a9","greenyellow":"#adff2f","lightblue":"#add8e6","paleturquoise":"#afeeee","lightsteelblue":"#b0c4de","powderblue":"#b0e0e6","firebrick":"#b22222","darkgoldenrod":"#b8860b","mediumorchid":"#ba55d3","rosybrown":"#bc8f8f","darkkhaki":"#bdb76b","silver":"#c0c0c0","mediumvioletred":"#c71585","indianred":"#cd5c5c","peru":"#cd853f","chocolate":"#d2691e","tan":"#d2b48c","lightgray":"#d3d3d3","lightgrey":"#d3d3d3","thistle":"#d8bfd8","goldenrod":"#daa520","orchid":"#da70d6","palevioletred":"#db7093","crimson":"#dc143c","gainsboro":"#dcdcdc","plum":"#dda0dd","burlywood":"#deb887","lightcyan":"#e0ffff","lavender":"#e6e6fa","darksalmon":"#e9967a","palegoldenrod":"#eee8aa","violet":"#ee82ee","azure":"#f0ffff","honeydew":"#f0fff0","khaki":"#f0e68c","lightcoral":"#f08080","sandybrown":"#f4a460","beige":"#f5f5dc","mintcream":"#f5fffa","wheat":"#f5deb3","whitesmoke":"#f5f5f5","ghostwhite":"#f8f8ff","lightgoldenrodyellow":"#fafad2","linen":"#faf0e6","salmon":"#fa8072","oldlace":"#fdf5e6","bisque":"#ffe4c4","blanchedalmond":"#ffebcd","coral":"#ff7f50","cornsilk":"#fff8dc","darkorange":"#ff8c00","deeppink":"#ff1493","floralwhite":"#fffaf0","fuchsia":"#ff00ff","gold":"#ffd700","hotpink":"#ff69b4","ivory":"#fffff0","lavenderblush":"#fff0f5","lemonchiffon":"#fffacd","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightyellow":"#ffffe0","magenta":"#ff00ff","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","orange":"#ffa500","orangered":"#ff4500","papayawhip":"#ffefd5","peachpuff":"#ffdab9","pink":"#ffc0cb","red":"#ff0000","seashell":"#fff5ee","snow":"#fffafa","tomato":"#ff6347","white":"#ffffff","yellow":"#ffff00","rebeccapurple":"#663399"}')},"./node_modules/css-color-names/css-color-names.json":e=>{"use strict";e.exports=JSON.parse('{"aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkgrey":"#a9a9a9","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkslategrey":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dimgrey":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","goldenrod":"#daa520","gold":"#ffd700","gray":"#808080","green":"#008000","greenyellow":"#adff2f","grey":"#808080","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred":"#cd5c5c","indigo":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavenderblush":"#fff0f5","lavender":"#e6e6fa","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","lightgray":"#d3d3d3","lightgreen":"#90ee90","lightgrey":"#d3d3d3","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightslategrey":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370db","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#db7093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","rebeccapurple":"#663399","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","slategrey":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"}')}},r={};function t(a){var n=r[a];if(void 0!==n)return n.exports;var o=r[a]={exports:{}};return e[a].call(o.exports,o,o.exports,t),o.exports}t.d=(e,r)=>{for(var a in r)t.o(r,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:r[a]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{"use strict";var e=a;Object.defineProperty(e,"__esModule",{value:!0});const r=t("./typescript/src/doc_functionality/color.ts"),n=t("./typescript/src/doc_functionality/health.ts"),o=t("./typescript/src/doc_functionality/lookup.ts"),s=t("./typescript/src/doc_functionality/markdown.ts"),i=t("./typescript/src/doc_functionality/sandbox.ts"),l=t("./typescript/src/doc_functionality/search.ts"),c=t("./typescript/src/doc_functionality/string_utils.ts"),u=t("./typescript/src/doc_functionality/tokens.ts"),d=t("./typescript/src/doc_functionality/urls.ts"),p=t("./typescript/src/doc_functionality/general-utils.ts");Pulsar.registerFunction("firstSubgroupOfPage",o.firstSubgroupOfPage),Pulsar.registerFunction("pageOrGroupActiveInContext",o.pageOrGroupActiveInContext),Pulsar.registerFunction("flattenedPageStructure",o.flattenedPageStructure),Pulsar.registerFunction("firstPageFromTop",o.firstPageFromTop),Pulsar.registerFunction("previousPage",o.previousPage),Pulsar.registerFunction("nextPage",o.nextPage),Pulsar.registerFunction("isExportable",o.isExportable),Pulsar.registerFunction("isHomepage",o.isHomepage),Pulsar.registerFunction("resolveMenuLabel",o.resolveMenuLabel),Pulsar.registerFunction("getCurrentTimestamp",o.getCurrentTimestamp),Pulsar.registerFunction("checkKeyInArray",o.checkKeyInArray),Pulsar.registerFunction("getFullYear",p.getFullYear),Pulsar.registerFunction("getFormattedDateTime",p.getFormattedDateTime),Pulsar.registerFunction("generateCustomCSSHash",p.generateCustomCSSHash),Pulsar.registerFunction("highlightSafeString",c.highlightSafeString),Pulsar.registerFunction("withHTMLNewlines",c.withHTMLNewlines),Pulsar.registerFunction("getUrlExtension",c.getUrlExtension),Pulsar.registerFunction("escapeHtml",c.escapeHtml),Pulsar.registerFunction("addSlashes",c.addSlashes),Pulsar.registerFunction("normalizeStringForSearch",c.normalizeStringForSearch),Pulsar.registerFunction("getSearchIDString",c.getSearchIDString),Pulsar.registerFunction("getVariantClass",c.getVariantClass),Pulsar.registerFunction("buildSearchIndexJSON",l.buildSearchIndexJSON),Pulsar.registerFunction("pageUrl",d.pageUrl),Pulsar.registerFunction("pageUrlForFilepath",d.pageUrlForFilepath),Pulsar.registerFunction("pageIdentifier",d.pageIdentifier),Pulsar.registerFunction("rootUrl",d.rootUrl),Pulsar.registerFunction("assetUrl",d.assetUrl),Pulsar.registerFunction("slugifyHeading",d.slugifyHeading),Pulsar.registerFunction("textBlockPlainText",d.textBlockPlainText),Pulsar.registerFunction("removeVersionFromDomainUrl",d.removeVersionFromDomainUrl),Pulsar.registerFunction("formattedTokenGroupHeader",u.formattedTokenGroupHeader),Pulsar.registerFunction("fullTokenGroupName",u.fullTokenGroupName),Pulsar.registerFunction("gradientDescription",u.gradientDescription),Pulsar.registerFunction("gradientTokenValue",u.gradientTokenValue),Pulsar.registerFunction("shadowDescription",u.shadowDescription),Pulsar.registerFunction("shadowTokenValue",u.shadowTokenValue),Pulsar.registerFunction("scaledShadowTokenValue",u.scaledShadowTokenValue),Pulsar.registerFunction("measureTypeIntoReadableUnit",u.measureTypeIntoReadableUnit),Pulsar.registerFunction("typographyDescription",u.typographyDescription),Pulsar.registerFunction("convertTypographyTokenToCSS",u.convertTypographyTokenToCSS),Pulsar.registerFunction("getFormattedColor",u.getFormattedColor),Pulsar.registerFunction("getColorValueFromSettings",u.getColorValueFromSettings),Pulsar.registerFunction("markdownToHTML",s.markdownToHTML),Pulsar.registerFunction("convertHealthTagIfAny",n.convertHealthTagIfAny),Pulsar.registerFunction("sortComponentsAlphabetically",n.sortComponentsAlphabetically),Pulsar.registerFunction("getFigmaFileUrl",n.getFigmaFileUrl),Pulsar.registerFunction("htmlSafeString",i.htmlSafeString),Pulsar.registerFunction("htmlSafeUrl",i.htmlSafeUrl),Pulsar.registerFunction("contrastColor",r.contrastColor),Pulsar.registerFunction("returnSwatchClassnames",r.returnSwatchClassnames),Pulsar.registerFunction("getColorContrast",r.getColorContrast),Pulsar.registerFunction("getColorContrastRatio",r.getColorContrastRatio),Pulsar.registerFunction("getClassForInvertedText",r.getClassForInvertedText),Pulsar.registerFunction("changelogToEntries",c.changelogToEntries)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,